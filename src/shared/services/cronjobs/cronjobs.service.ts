import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { Cron, CronExpression } from '@nestjs/schedule';
import {
  BREAK_RULE_DAYS,
  DAY,
  GYM_SESSION,
  IF_CLAUSE_LOW_INTENSITY,
  INJURY_TYPE,
  INTENSITY,
  MACHINE_TYPE,
  RACE_RULE_TYPE,
  ROLE_TITLE,
  THEN_CLAUSE_LOW_INTENSITY,
  WORKOUT_CATEGORY,
  WORKOUT_COMBINATION_BEFORE_AFTER,
  WORKOUT_COMBINATION_STATUS,
  WORKOUT_TYPE,
  WORKOUT_TYPE_DAYS,
} from '@prisma/client';
import { startOfWeek, endOfWeek, addWeeks } from 'date-fns';

@Injectable()
export class CronjobsService {
  constructor(private readonly prisma: PrismaService) { }

  logger = new Logger(CronjobsService.name);

  //Create cronjob that triggers at start of saturday
  // Helper function to convert duration string to seconds
  durationStringToSeconds = (duration: string): number => {
    const [hoursPart, minutesPart] = duration
      .split(' ')
      .filter((part) => part !== 'h' && part !== 'm');
    const hours = parseInt(hoursPart) || 0;
    const minutes = parseInt(minutesPart) || 0;
    return hours * 3600 + minutes * 60;
  };

  // Function to convert "HH:MM" to seconds
  timeToSeconds(time: string): number {
    const [hours, minutes] = time.split(':').map(Number);
    return hours * 3600 + minutes * 60;
  }

  shuffleArray<T>(array: T[]): T[] {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }


  @Cron('0 0 * * 6')
  async handleSchedulingGymSessions() {
    this.logger.debug('Cron job running at the start of Saturday.');
    // Add your logic here, e.g., interacting with the Prisma service

    const athleteRole = await this.prisma.role.findUnique({
      where: {
        title: ROLE_TITLE.ATHLETE,
      },
    });

    const athletes = await this.prisma.user.findMany({
      where: {
        roleId: athleteRole.id,
        plans: {
          some: {}, // This will filter users who have at least one related plan
        },
      },
    });

    for (const athlete of athletes) {
      const userPlan = await this.prisma.userPlan.findFirst({
        where: {
          current: true,
          userId: athlete.id,
          plan: {
            type: {
              not: 'fixed',
            },
          },
        },
        include: {
          plan: true, // This includes the related Plan object in the result
        },
      });

      if (userPlan) {
        //Extract Plan
        const planSuperSetId = userPlan.plan.planSuperSetId;
        const originalPlan = await this.prisma.plan.findFirst({
          where: {
            planSuperSetId,
            userClone: false,
          },
        });

        //Get user workoutSettings

        const workoutSettings = await this.prisma.workoutSetting.findUnique({
          where: {
            userId: athlete.id,
          },
          include: {
            weekDaySettings: true,
          },
        });
        let raceDayCheck = false;
        let raceSimulationCheck = false;

        if (workoutSettings) {
          if (workoutSettings.raceDay) {
            //raceDay logic

            const raceDay = workoutSettings.raceDay;

            // Get the start and end of the next week
            const now = new Date();
            const startOfNextWeekDate = startOfWeek(addWeeks(now, 1), {
              weekStartsOn: 1,
            }); // Next week starts on Monday
            const endOfNextWeekDate = endOfWeek(addWeeks(now, 1), {
              weekStartsOn: 1,
            }); // Next week ends on Sunday

            // Check if raceDay falls within the next week
            if (
              raceDay >= startOfNextWeekDate &&
              raceDay <= endOfNextWeekDate
            ) {
              console.log('Race day is in the next week.');
              raceDayCheck = true;
              const raceRules = await this.prisma.raceRules.findMany({
                where: {
                  planId: originalPlan.id,
                  type: RACE_RULE_TYPE.Race,
                },
                include: {
                  workout: true,
                },
              });

              for (const raceRule of raceRules) {
                //create planSchedule
                if (raceRule.workoutId) {
                  const existingPlanSchedule =
                    await this.prisma.planSchedule.findFirst({
                      where: {
                        planId: userPlan.planId,
                      },
                      orderBy: {
                        week: 'desc',
                      },
                    });

                  let planSchedule;
                  if (existingPlanSchedule) {
                    planSchedule = await this.prisma.planSchedule.create({
                      data: {
                        week: existingPlanSchedule.week + 1,
                        userClone: true,
                        planId: userPlan.planId,
                        gymSession: raceRule.gymSession,
                        day: raceRule.weekDay,
                      },
                    });
                  } else {
                    planSchedule = await this.prisma.planSchedule.create({
                      data: {
                        week: 1,
                        userClone: true,
                        planId: userPlan.planId,
                        gymSession: raceRule.gymSession,
                        day: raceRule.weekDay,
                      },
                    });
                  }

                  //for scheduleWorkouts, create workout first

                  const workout = await this.prisma.workout.findUnique({
                    where: {
                      id: raceRule.workoutId,
                    },
                    include: {
                      WorkoutParts: {
                        include: {
                          comments: true,
                          breaks: true,
                          partExercises: {
                            include: {
                              exercise: true,
                            },
                          },
                        },
                      },
                    },
                  });

                  const athleteWorkout = await this.prisma.workout.create({
                    data: {
                      name: workout.name,
                      type: workout.type,
                      generated: workout.generated,
                      duration: workout.duration,
                      relatedInjuries: workout.relatedInjuries,
                      injuries: workout.injuries,
                      mediaUrl: workout.mediaUrl,
                      holidayMode: workout.holidayMode,
                      userClone: true,
                      workoutSuperSetId: workout.workoutSuperSetId,
                    },
                  });

                  //create workoutParts
                  const { WorkoutParts } = workout;
                  if (WorkoutParts.length > 0) {
                    for (const workoutPart of WorkoutParts) {
                      const { comments, breaks, partExercises } = workoutPart;
                      const athleteWorkoutPart =
                        await this.prisma.workoutParts.create({
                          data: {
                            userClone: true,
                            name: workoutPart.name,
                            position: workoutPart.position,
                            workoutId: athleteWorkout.id,
                          },
                        });

                      //create comments
                      if (comments.length > 0) {
                        for (const comment of comments) {
                          await this.prisma.comment.create({
                            data: {
                              userClone: true,
                              position: comment.position,
                              comment: comment.comment,
                              workoutPartsId: athleteWorkoutPart.id,
                            },
                          });
                        }
                      }
                      //create breaks
                      if (breaks.length > 0) {
                        for (const brk of breaks) {
                          await this.prisma.break.create({
                            data: {
                              userClone: true,
                              position: brk.position,
                              break: brk.break,
                              workoutPartsId: athleteWorkoutPart.id,
                            },
                          });
                        }
                      }
                      //create partExercises
                      if (partExercises.length > 0) {
                        for (const partExercise of partExercises) {
                          await this.prisma.partExercises.create({
                            data: {
                              userClone: true,
                              benchmark: partExercise.benchmark,
                              intensity: partExercise.intensity,
                              position: partExercise.position,
                              fieldOne: partExercise.fieldOne,
                              fieldTwo: partExercise.fieldTwo,
                              reps: partExercise.reps,
                              sets: partExercise.sets,
                              partId: athleteWorkoutPart.id,
                              exerciseId: partExercise.exerciseId,
                            },
                          });
                        }
                      }
                    }
                  }

                  //now create scheduleWorkout
                  await this.prisma.scheduleWorkout.create({
                    data: {
                      userClone: true,
                      planScheduleId: planSchedule.id,
                      workoutId: athleteWorkout.id,
                    },
                  });
                }
              }
            }
          } else if (workoutSettings.raceDaySimulation) {
            //raceSimulation logic

            const raceSimulationDay = workoutSettings.raceDaySimulation;

            // Get the start and end of the next week
            const now = new Date();
            const startOfNextWeekDate = startOfWeek(addWeeks(now, 1), {
              weekStartsOn: 1,
            }); // Next week starts on Monday
            const endOfNextWeekDate = endOfWeek(addWeeks(now, 1), {
              weekStartsOn: 1,
            }); // Next week ends on Sunday

            // Check if raceSimulationDay falls within the next week
            if (
              raceSimulationDay >= startOfNextWeekDate &&
              raceSimulationDay <= endOfNextWeekDate
            ) {
              console.log('Race Simulation day is in the next week.');
              raceSimulationCheck = true;
              const raceRules = await this.prisma.raceRules.findMany({
                where: {
                  planId: originalPlan.id,
                  type: RACE_RULE_TYPE.RaceSimulation,
                },
                include: {
                  workout: true,
                },
              });

              for (const raceRule of raceRules) {
                //create planSchedule
                if (raceRule.workoutId) {
                  const existingPlanSchedule =
                    await this.prisma.planSchedule.findFirst({
                      where: {
                        planId: userPlan.planId,
                      },
                      orderBy: {
                        week: 'desc',
                      },
                    });

                  let planSchedule;
                  if (existingPlanSchedule) {
                    planSchedule = await this.prisma.planSchedule.create({
                      data: {
                        week: existingPlanSchedule.week + 1,
                        userClone: true,
                        planId: userPlan.planId,
                        gymSession: raceRule.gymSession,
                        day: raceRule.weekDay,
                      },
                    });
                  } else {
                    planSchedule = await this.prisma.planSchedule.create({
                      data: {
                        week: 1,
                        userClone: true,
                        planId: userPlan.planId,
                        gymSession: raceRule.gymSession,
                        day: raceRule.weekDay,
                      },
                    });
                  }

                  //for scheduleWorkouts, create workout first

                  const workout = await this.prisma.workout.findUnique({
                    where: {
                      id: raceRule.workoutId,
                    },
                    include: {
                      WorkoutParts: {
                        include: {
                          comments: true,
                          breaks: true,
                          partExercises: {
                            include: {
                              exercise: true,
                            },
                          },
                        },
                      },
                    },
                  });
                  const athleteWorkout = await this.prisma.workout.create({
                    data: {
                      name: workout.name,
                      type: workout.type,
                      generated: workout.generated,
                      duration: workout.duration,
                      relatedInjuries: workout.relatedInjuries,
                      injuries: workout.injuries,
                      mediaUrl: workout.mediaUrl,
                      holidayMode: workout.holidayMode,
                      userClone: true,
                      workoutSuperSetId: workout.workoutSuperSetId,
                    },
                  });

                  //create workoutParts
                  const { WorkoutParts } = workout;
                  if (WorkoutParts.length > 0) {
                    for (const workoutPart of WorkoutParts) {
                      const { comments, breaks, partExercises } = workoutPart;
                      const athleteWorkoutPart =
                        await this.prisma.workoutParts.create({
                          data: {
                            userClone: true,
                            name: workoutPart.name,
                            position: workoutPart.position,
                            workoutId: athleteWorkout.id,
                          },
                        });

                      //create comments
                      if (comments.length > 0) {
                        for (const comment of comments) {
                          await this.prisma.comment.create({
                            data: {
                              userClone: true,
                              position: comment.position,
                              comment: comment.comment,
                              workoutPartsId: athleteWorkoutPart.id,
                            },
                          });
                        }
                      }
                      //create breaks
                      if (breaks.length > 0) {
                        for (const brk of breaks) {
                          await this.prisma.break.create({
                            data: {
                              userClone: true,
                              position: brk.position,
                              break: brk.break,
                              workoutPartsId: athleteWorkoutPart.id,
                            },
                          });
                        }
                      }
                      //create partExercises
                      if (partExercises.length > 0) {
                        for (const partExercise of partExercises) {
                          await this.prisma.partExercises.create({
                            data: {
                              userClone: true,
                              benchmark: partExercise.benchmark,
                              intensity: partExercise.intensity,
                              position: partExercise.position,
                              fieldOne: partExercise.fieldOne,
                              fieldTwo: partExercise.fieldTwo,
                              reps: partExercise.reps,
                              sets: partExercise.sets,
                              partId: athleteWorkoutPart.id,
                              exerciseId: partExercise.exerciseId,
                            },
                          });
                        }
                      }
                    }
                  }

                  //now create scheduleWorkout
                  await this.prisma.scheduleWorkout.create({
                    data: {
                      userClone: true,
                      planScheduleId: planSchedule.id,
                      workoutId: athleteWorkout.id,
                    },
                  });
                }
              }
            }
          }
          if (!raceDayCheck && !raceSimulationCheck) {
            //if no raceDay or raceSimulation in nextWeek
            const restDayRules = await this.prisma.restDayRules.findUnique({
              where: {
                planId: originalPlan.id,
              },
            });

            //Rule: 2.1
            const restDays = restDayRules.days;

            const existingPlanSchedule =
              await this.prisma.planSchedule.findFirst({
                where: {
                  planId: userPlan.planId,
                },
                orderBy: {
                  week: 'desc',
                },
              });

            if (existingPlanSchedule) {
              const lastWeekSchedules = await this.prisma.planSchedule.findMany(
                {
                  where: {
                    week: existingPlanSchedule.week,
                    planId: userPlan.planId,
                  },
                },
              );

              // Initialize an array to represent the days of the week
              const daysOfWeek = [
                DAY.Monday,
                DAY.Tuesday,
                DAY.Wednesday,
                DAY.Thursday,
                DAY.Friday,
                DAY.Saturday,
                DAY.Sunday,
              ];

              // Create a Set to store the days that are present in lastWeekSchedules
              const presentDays = new Set<DAY>();

              // Iterate through the lastWeekSchedules and add each day to the presentDays Set
              for (const lastWeekSchedule of lastWeekSchedules) {
                presentDays.add(lastWeekSchedule.day);
              }

              // Check for non-missing consecutive days and maintain count
              let nonMissingCount = 0;
              let maxNonMissingCount = 0;

              for (const day of daysOfWeek) {
                if (presentDays.has(day)) {
                  // If the day is present, increment the non-missing count
                  nonMissingCount += 1;
                } else {
                  // If the day is missing, reset the non-missing count
                  if (nonMissingCount > maxNonMissingCount) {
                    maxNonMissingCount = nonMissingCount;
                  }
                  nonMissingCount = 0;
                }
              }

              // Final check for the last streak of non-missing days
              if (nonMissingCount > maxNonMissingCount) {
                maxNonMissingCount = nonMissingCount;
              }
              //skip period for now (Rule 2.2)

              //break between workoutTypes

              //have to narrow down the workoutTypes

              //first get the workoutSettings and check the available days of athlete
              // Initialize a Map to store occurrences of each day
              const dayOccurrences = new Map<string, number>();

              for (const weekDaySetting of workoutSettings.weekDaySettings) {
                let dayName = '';

                if (weekDaySetting.day === DAY.Monday) {
                  dayName = 'Monday';
                } else if (weekDaySetting.day === DAY.Tuesday) {
                  dayName = 'Tuesday';
                } else if (weekDaySetting.day === DAY.Wednesday) {
                  dayName = 'Wednesday';
                } else if (weekDaySetting.day === DAY.Thursday) {
                  dayName = 'Thursday';
                } else if (weekDaySetting.day === DAY.Friday) {
                  dayName = 'Friday';
                } else if (weekDaySetting.day === DAY.Saturday) {
                  dayName = 'Saturday';
                } else if (weekDaySetting.day === DAY.Sunday) {
                  dayName = 'Sunday';
                }

                // Update the count for the current day
                dayOccurrences.set(
                  dayName,
                  (dayOccurrences.get(dayName) || 0) + 1,
                );
              }

              // Get the occurrences of Monday:
              //   const mondayOccurrences = dayOccurrences.get('Monday') || 0;

              // Calculate the total occurrences of all days
              let totalOccurrences = 0;
              for (const count of dayOccurrences.values()) {
                totalOccurrences += count;
              }

              // To get the count of unique days
              const uniqueDaysCount = dayOccurrences.size;

              let workoutTypeRules;
              //Increment this counter on saving a schedule, then if counter === totalOccurrences, stop the week scheduling
              //this counter is basically for counting gym sessions.
              let counter = 0;
              //if 1 day of workout
              if (uniqueDaysCount === 1) {
                //Get the priority of workoutTypes that should be assigned
                workoutTypeRules = await this.prisma.workoutTypeRules.findFirst(
                  {
                    where: {
                      day: WORKOUT_TYPE_DAYS.OneDay,
                      planId: originalPlan.id,
                    },
                    include: {
                      workoutPriorityOccurrence: {
                        orderBy: {
                          priority: 'asc',
                        },
                      },
                    },
                  },
                );
                //iterate the priority list of workouts
                //Have to iterate single workoutType on top priority for the whole week then move to next one
                const { workoutPriorityOccurrence } = workoutTypeRules;
                //have to also maintain a counter for the occurrence of the workoutType

                for (const workoutPriorityType of workoutPriorityOccurrence) {
                  const workoutType = workoutPriorityType.workoutType;
                  if (counter === totalOccurrences) {
                    break;
                  }
                  //increment this counter on successful scheduling
                  let workoutOccurrence = 0;

                  for (const weekDaySetting of workoutSettings.weekDaySettings) {
                    if (workoutOccurrence === workoutPriorityType.occurrence) {
                      break;
                    }

                    if (weekDaySetting.day === DAY.Monday) {
                      //check restDay rules
                      if (maxNonMissingCount !== restDays) {

                        if (weekDaySetting.session === GYM_SESSION.Morning) {
                          const exist =
                            await this.prisma.planSchedule.findUnique({
                              where: {
                                week_day_gymSession_planId: {
                                  week: existingPlanSchedule.week + 1,
                                  planId: userPlan.planId,
                                  gymSession: GYM_SESSION.Morning,
                                  day: DAY.Monday,
                                },
                              },
                              include: {
                                scheduleWorkouts: {
                                  include: {
                                    workout: true,
                                  },
                                },
                              },
                            });

                          if (!exist) {
                            //check break rules
                            const breakRules =
                              await this.prisma.breakRules.findMany({
                                where: {
                                  planId: originalPlan.id,
                                  workoutType,
                                },
                              });

                            let twoDayBefore = true;
                            let oneHalfDayBefore = true;
                            let oneDayBefore = true;
                            let oneDayAfter = true;
                            let oneHalfDayAfter = true;
                            let twoDayAfter = true;

                            for (const breakRule of breakRules) {
                              if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayBefore
                              ) {
                                //Monday 2 ===> Sat Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const satEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Saturday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const satEveningWorkoutTypes: string[] = [];
                                const sunMorningWorkoutTypes: string[] = [];
                                const sunEveningWorkoutTypes: string[] = [];
                                if (satEvening) {
                                  for (const scheduleWorkout of satEvening?.scheduleWorkouts) {
                                    satEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunMorning) {
                                  for (const scheduleWorkout of sunMorning?.scheduleWorkouts) {
                                    sunMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      satEveningWorkoutTypes.includes(type) ||
                                      sunMorningWorkoutTypes.includes(type) ||
                                      sunEveningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayBefore = true;
                                } else {
                                  twoDayBefore = false;
                                }

                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneHalfDayBefore
                              ) {
                                //Monday 1.5 ===> Sat Evening
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const sunMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunMorningWorkoutTypes: string[] = [];
                                const sunEveningWorkoutTypes: string[] = [];

                                if (sunMorning) {
                                  for (const scheduleWorkout of sunMorning?.scheduleWorkouts) {
                                    sunMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      sunMorningWorkoutTypes.includes(type) ||
                                      sunEveningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayBefore = true;
                                  //means no break
                                } else {
                                  oneHalfDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneDayBefore
                              ) {
                                //Monday 1 ===> Sun Morning

                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEveningWorkoutTypes: string[] = [];

                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some((type) =>
                                    sunEveningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneDayBefore = true;
                                  //means no break
                                } else {
                                  oneDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayAfter
                              ) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monEveningWorkoutTypes: string[] = [];
                                const tueEveningWorkoutTypes: string[] = [];
                                const tueMorningWorkoutTypes: string[] = [];
                                if (monEvening) {
                                  for (const scheduleWorkout of monEvening?.scheduleWorkouts) {
                                    monEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monEveningWorkoutTypes.includes(type) ||
                                      tueEveningWorkoutTypes.includes(type) ||
                                      tueMorningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayAfter = true;
                                } else {
                                  twoDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneHalfDayAfter) {
                                //Monday 1.5 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monEveningWorkoutTypes: string[] = [];
                                const tueMorningWorkoutTypes: string[] = [];
                                if (monEvening) {
                                  for (const scheduleWorkout of monEvening?.scheduleWorkouts) {
                                    monEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monEveningWorkoutTypes.includes(type) ||
                                      tueMorningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayAfter = true;
                                } else {
                                  oneHalfDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneDayAfter) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const monEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });


                                const monEveningWorkoutTypes: string[] = [];
                                if (monEvening) {
                                  for (const scheduleWorkout of monEvening?.scheduleWorkouts) {
                                    monEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }


                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monEveningWorkoutTypes.includes(type)
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneDayAfter = true;
                                } else {
                                  oneDayAfter = false;
                                }

                              }
                            }

                            if (twoDayBefore && oneHalfDayBefore && oneDayBefore && oneDayAfter && oneDayAfter && oneHalfDayAfter && twoDayAfter) {
                              //now check low intensity rules
                              const lowIntensityWorkoutTypesData =
                                await this.prisma.lowIntensityWorkoutTypes.findUnique(
                                  {
                                    where: {
                                      planId: originalPlan.id,
                                    },
                                  },
                                );

                              const lowIntensityWorkoutTypes =
                                lowIntensityWorkoutTypesData.lowIntensityWorkoutTypes;

                              if (lowIntensityWorkoutTypes) {
                                const lowIntensityRules =
                                  await this.prisma.lowIntensityRules.findMany(
                                    {
                                      where: {
                                        planId: originalPlan.id,
                                      },
                                    },
                                  );

                                let lowIntensityCounter = 0;
                                let restDayCounter = 0
                                for (const lowIntensityRule of lowIntensityRules) {
                                  const { ifClauses, thenClause } =
                                    lowIntensityRule;

                                  const backTrack = ifClauses.length;

                                  if (lowIntensityCounter !== 1 || restDayCounter !== 1) {
                                    if (backTrack === 1) {
                                      //Monday Mor ===> Sunday Even
                                      if (
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.LowIntensityWorkout &&
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.RestDay
                                      ) {
                                        const highIntensityWorkoutType =
                                          ifClauses[0];
                                        const sundayEvening =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Evening,
                                                  day: DAY.Sunday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const sundayMorning =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Morning,
                                                  day: DAY.Sunday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const sundayEveningWorkoutTypes: string[] =
                                          [];
                                        const sundayMorningWorkoutTypes: string[] =
                                          [];

                                        if (sundayEvening) {
                                          for (const scheduleWorkout of sundayEvening.scheduleWorkouts) {
                                            sundayEveningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (sundayMorning) {
                                          for (const scheduleWorkout of sundayMorning.scheduleWorkouts) {
                                            sundayMorningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        // Check if highIntensityWorkoutType is in sundayEveningWorkoutTypes or sundayMorningWorkoutTypes
                                        const isHighWorkoutTypeInEvening =
                                          sundayEveningWorkoutTypes.includes(
                                            highIntensityWorkoutType,
                                          );
                                        const isHighWorkoutTypeInMorning =
                                          sundayMorningWorkoutTypes.includes(
                                            highIntensityWorkoutType,
                                          );


                                        if (isHighWorkoutTypeInEvening || isHighWorkoutTypeInMorning) {
                                          if (
                                            thenClause ===
                                            THEN_CLAUSE_LOW_INTENSITY.LowIntensityWorkout
                                          ) {
                                            lowIntensityCounter = 1;
                                            counter = counter + 1;
                                            maxNonMissingCount = maxNonMissingCount + 1;

                                            const shuffledLowIntensityWorkoutTypes = this.shuffleArray(lowIntensityWorkoutTypes);

                                            // Select one workout type randomly
                                            const randomLowIntensityWorkoutType = shuffledLowIntensityWorkoutTypes[
                                              Math.floor(Math.random() * shuffledLowIntensityWorkoutTypes.length)
                                            ];

                                            let lowIntensityWorkoutCount = 0;

                                            //check combination rules as well to see if anything comes before or after

                                            const combinationsRules = await this.prisma.combinationRules.findUnique({
                                              where: {
                                                planId: originalPlan.id,
                                              },
                                            })

                                            const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                              where: {
                                                combinationRulesId_workoutType: {
                                                  combinationRulesId: combinationsRules.id,
                                                  workoutType: randomLowIntensityWorkoutType,
                                                }
                                              },
                                              include: {
                                                workoutTypesCombinations: {
                                                  orderBy: {
                                                    priority: 'asc'
                                                  }
                                                }
                                              }
                                            })

                                            const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                            if (lowIntensityWorkoutCount !== 1) {
                                              let randomLowIntensityWorkout;
                                              const workouts = await this.prisma.workout.findMany({
                                                where: {
                                                  type: randomLowIntensityWorkoutType,
                                                  generated: true,
                                                },
                                              });

                                              // Randomize and pick one workout
                                              if (workouts.length > 0) {
                                                randomLowIntensityWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                const selectedWorkout = await this.prisma.workout.findUnique(
                                                  {
                                                    where: {
                                                      id: randomLowIntensityWorkout.id
                                                    },
                                                    include: {
                                                      WorkoutParts: {
                                                        include: {
                                                          comments: true,
                                                          breaks: true,
                                                          partExercises: {
                                                            include: {
                                                              exercise: true,
                                                            },
                                                          },
                                                          generatedExercises: true
                                                        },
                                                      },
                                                    },
                                                  },
                                                );

                                                const existingPlanSchedule =
                                                  await this.prisma.planSchedule.findFirst(
                                                    {
                                                      where: {
                                                        planId:
                                                          userPlan.planId,
                                                      },
                                                      orderBy: {
                                                        week: 'desc',
                                                      },
                                                    },
                                                  );

                                                let planSchedule;
                                                if (existingPlanSchedule) {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week:
                                                            existingPlanSchedule.week +
                                                            1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Monday,
                                                        },
                                                      },
                                                    );
                                                } else {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week: 1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Monday,
                                                        },
                                                      },
                                                    );
                                                }

                                                let beforeMandatoryWorkoutTypes;
                                                let afterMandatoryWorkoutTypes;
                                                let beforeOptionalWorkoutTypes;
                                                let afterOptionalWorkoutTypes;
                                                for (const workoutTypesCombination of workoutTypesCombinations) {
                                                  if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  }
                                                }

                                                if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                                  for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryWorkout
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryWorkoutType.name,
                                                              type: selectedMandatoryWorkoutType.type,
                                                              generated:
                                                                selectedMandatoryWorkoutType.generated,
                                                              duration:
                                                                selectedMandatoryWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                                  for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalBeforeWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalBeforeWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionalWorkoutType.name,
                                                              type: selectedOptionalWorkoutType.type,
                                                              generated:
                                                                selectedOptionalWorkoutType.generated,
                                                              duration:
                                                                selectedOptionalWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedOptionalWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedOptionalWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedOptionalWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionalWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionalWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionalWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }
                                                //TODO: add durationSeconds lateron
                                                const athleteWorkout =
                                                  await this.prisma.workout.create(
                                                    {
                                                      data: {
                                                        name: selectedWorkout.name,
                                                        type: selectedWorkout.type,
                                                        generated:
                                                          selectedWorkout.generated,
                                                        duration:
                                                          selectedWorkout.duration,
                                                        relatedInjuries:
                                                          selectedWorkout.relatedInjuries,
                                                        injuries:
                                                          selectedWorkout.injuries,
                                                        mediaUrl:
                                                          selectedWorkout.mediaUrl,
                                                        holidayMode:
                                                          selectedWorkout.holidayMode,
                                                        userClone: true,
                                                        workoutSuperSetId:
                                                          selectedWorkout.workoutSuperSetId,
                                                      },
                                                    },
                                                  );

                                                await this.prisma.scheduleWorkout.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      planScheduleId:
                                                        planSchedule.id,
                                                      workoutId:
                                                        athleteWorkout.id,
                                                    },
                                                  },
                                                );

                                                const { WorkoutParts } =
                                                  selectedWorkout;
                                                for (const workoutPart of WorkoutParts) {
                                                  const {
                                                    comments,
                                                    breaks,
                                                    partExercises,
                                                    generatedExercises
                                                  } = workoutPart;
                                                  const athleteWorkoutPart =
                                                    await this.prisma.workoutParts.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          name: workoutPart.name,
                                                          position:
                                                            workoutPart.position,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                  //create comments
                                                  if (comments.length > 0) {
                                                    for (const comment of comments) {
                                                      await this.prisma.comment.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              comment.position,
                                                            comment:
                                                              comment.comment,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }
                                                  //create breaks
                                                  if (breaks.length > 0) {
                                                    for (const brk of breaks) {
                                                      await this.prisma.break.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              brk.position,
                                                            break: brk.break,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }

                                                  if (partExercises && partExercises.length > 0) {
                                                    for (const partExercise of partExercises) {

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              partExercise.benchmark,
                                                            intensity:
                                                              partExercise.intensity,
                                                            position:
                                                              partExercise.position,
                                                            fieldOne:
                                                              partExercise.fieldOne,
                                                            fieldTwo:
                                                              partExercise.fieldTwo,
                                                            reps: partExercise.reps,
                                                            sets: partExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              partExercise.exerciseId,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                  //extract generatedExercises and select an exercise to assign as partExercise
                                                  if (generatedExercises && generatedExercises.length > 0) {
                                                    for (const generatedExercise of generatedExercises) {

                                                      const { muscleGroup, exerciseType } = generatedExercise

                                                      const exercises = await this.prisma.exercise.findMany({
                                                        where: {
                                                          muscleGroup,
                                                          exerciseType
                                                        }
                                                      });

                                                      const randomExercise =
                                                        exercises[
                                                        Math.floor(
                                                          Math.random() *
                                                          exercises.length,
                                                        )
                                                        ];

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              generatedExercise.benchmark,
                                                            intensity:
                                                              generatedExercise.intensity,
                                                            position:
                                                              generatedExercise.position,
                                                            fieldOne:
                                                              generatedExercise.fieldOne,
                                                            fieldTwo:
                                                              generatedExercise.fieldTwo,
                                                            reps: generatedExercise.reps,
                                                            sets: generatedExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              randomExercise.id,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                }

                                                if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                                  for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryAfterWorkout.name,
                                                              type: selectedMandatoryAfterWorkout.type,
                                                              generated:
                                                                selectedMandatoryAfterWorkout.generated,
                                                              duration:
                                                                selectedMandatoryAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                                  for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionAfterWorkout.name,
                                                              type: selectedOptionAfterWorkout.type,
                                                              generated:
                                                                selectedOptionAfterWorkout.generated,
                                                              duration:
                                                                selectedOptionAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedOptionAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedOptionAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedOptionAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          } else if (
                                            thenClause === THEN_CLAUSE_LOW_INTENSITY.RestDay
                                          ) {
                                            //increment restDay counter
                                            restDayCounter = 1
                                          }
                                        }
                                      }
                                    } else if (backTrack === 2) {
                                      //Monday Mor ===> Sat Mor, Sat Even, Sun Mor, Sun Even
                                      if (
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.LowIntensityWorkout &&
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.RestDay &&
                                        ifClauses[1] !==
                                        IF_CLAUSE_LOW_INTENSITY.LowIntensityWorkout &&
                                        ifClauses[1] !==
                                        IF_CLAUSE_LOW_INTENSITY.RestDay
                                      ) {
                                        const highIntensityWorkoutTypeOne =
                                          ifClauses[0];
                                        const highIntensityWorkoutTypeTwo =
                                          ifClauses[1];

                                        const sundayEvening =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Evening,
                                                  day: DAY.Sunday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const sundayMorning =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Morning,
                                                  day: DAY.Sunday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );


                                        const satEvening =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Evening,
                                                  day: DAY.Saturday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const satMorning =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Morning,
                                                  day: DAY.Saturday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const sundayEveningWorkoutTypes: string[] =
                                          [];
                                        const sundayMorningWorkoutTypes: string[] =
                                          [];
                                        const saturdayEveningWorkoutTypes: string[] =
                                          [];
                                        const saturdayMorningWorkoutTypes: string[] =
                                          [];

                                        if (sundayEvening) {
                                          for (const scheduleWorkout of sundayEvening.scheduleWorkouts) {
                                            sundayEveningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (sundayMorning) {
                                          for (const scheduleWorkout of sundayMorning.scheduleWorkouts) {
                                            sundayMorningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (satEvening) {
                                          for (const scheduleWorkout of sundayEvening.scheduleWorkouts) {
                                            saturdayEveningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (satMorning) {
                                          for (const scheduleWorkout of sundayMorning.scheduleWorkouts) {
                                            saturdayMorningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        // Check if highIntensityWorkoutTypeOne is in both Saturday and Sunday
                                        const isHighWorkoutTypeOneInWeek =
                                          (saturdayEveningWorkoutTypes.includes(highIntensityWorkoutTypeOne) ||
                                            saturdayMorningWorkoutTypes.includes(highIntensityWorkoutTypeOne)) &&
                                          (sundayEveningWorkoutTypes.includes(highIntensityWorkoutTypeOne) ||
                                            sundayMorningWorkoutTypes.includes(highIntensityWorkoutTypeOne));

                                        // Check if highIntensityWorkoutTypeTwo is in both Saturday and Sunday
                                        const isHighWorkoutTypeTwoInWeek =
                                          (saturdayEveningWorkoutTypes.includes(highIntensityWorkoutTypeTwo) ||
                                            saturdayMorningWorkoutTypes.includes(highIntensityWorkoutTypeTwo)) &&
                                          (sundayEveningWorkoutTypes.includes(highIntensityWorkoutTypeTwo) ||
                                            sundayMorningWorkoutTypes.includes(highIntensityWorkoutTypeTwo));

                                        // Trigger logic if both high-intensity workouts are scheduled on consecutive days
                                        if (isHighWorkoutTypeOneInWeek && isHighWorkoutTypeTwoInWeek) {
                                          if (
                                            thenClause ===
                                            THEN_CLAUSE_LOW_INTENSITY.LowIntensityWorkout
                                          ) {
                                            counter = counter + 1;
                                            lowIntensityCounter = 1;
                                            maxNonMissingCount = maxNonMissingCount + 1;

                                            const shuffledLowIntensityWorkoutTypes = this.shuffleArray(lowIntensityWorkoutTypes);

                                            // Select one workout type randomly
                                            const randomLowIntensityWorkoutType = shuffledLowIntensityWorkoutTypes[
                                              Math.floor(Math.random() * shuffledLowIntensityWorkoutTypes.length)
                                            ];

                                            let lowIntensityWorkoutCount = 0
                                            //check combination rules as well to see if anything comes before or after

                                            const combinationsRules = await this.prisma.combinationRules.findUnique({
                                              where: {
                                                planId: originalPlan.id,
                                              },
                                            })

                                            const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                              where: {
                                                combinationRulesId_workoutType: {
                                                  combinationRulesId: combinationsRules.id,
                                                  workoutType: randomLowIntensityWorkoutType,
                                                }
                                              },
                                              include: {
                                                workoutTypesCombinations: {
                                                  orderBy: {
                                                    priority: 'asc'
                                                  }
                                                }
                                              }
                                            })

                                            const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                            if (lowIntensityWorkoutCount !== 1) {
                                              let randomLowIntensityWorkout;
                                              const workouts = await this.prisma.workout.findMany({
                                                where: {
                                                  type: randomLowIntensityWorkoutType,
                                                  generated: true,
                                                },
                                              });

                                              // Randomize and pick one workout
                                              if (workouts.length > 0) {
                                                randomLowIntensityWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                const selectedWorkout = await this.prisma.workout.findUnique(
                                                  {
                                                    where: {
                                                      id: randomLowIntensityWorkout.id
                                                    },
                                                    include: {
                                                      WorkoutParts: {
                                                        include: {
                                                          comments: true,
                                                          breaks: true,
                                                          partExercises: {
                                                            include: {
                                                              exercise: true,
                                                            },
                                                          },
                                                          generatedExercises: true
                                                        },
                                                      },
                                                    },
                                                  },
                                                );

                                                const existingPlanSchedule =
                                                  await this.prisma.planSchedule.findFirst(
                                                    {
                                                      where: {
                                                        planId:
                                                          userPlan.planId,
                                                      },
                                                      orderBy: {
                                                        week: 'desc',
                                                      },
                                                    },
                                                  );

                                                let planSchedule;
                                                if (existingPlanSchedule) {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week:
                                                            existingPlanSchedule.week +
                                                            1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Monday,
                                                        },
                                                      },
                                                    );
                                                } else {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week: 1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Monday,
                                                        },
                                                      },
                                                    );
                                                }

                                                let beforeMandatoryWorkoutTypes;
                                                let afterMandatoryWorkoutTypes;
                                                let beforeOptionalWorkoutTypes;
                                                let afterOptionalWorkoutTypes;
                                                for (const workoutTypesCombination of workoutTypesCombinations) {
                                                  if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  }
                                                }

                                                if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                                  for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryWorkout
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryWorkoutType.name,
                                                              type: selectedMandatoryWorkoutType.type,
                                                              generated:
                                                                selectedMandatoryWorkoutType.generated,
                                                              duration:
                                                                selectedMandatoryWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                                  for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalBeforeWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalBeforeWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionalWorkoutType.name,
                                                              type: selectedOptionalWorkoutType.type,
                                                              generated:
                                                                selectedOptionalWorkoutType.generated,
                                                              duration:
                                                                selectedOptionalWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedOptionalWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedOptionalWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedOptionalWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionalWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionalWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionalWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }
                                                //TODO: add durationSeconds lateron
                                                const athleteWorkout =
                                                  await this.prisma.workout.create(
                                                    {
                                                      data: {
                                                        name: selectedWorkout.name,
                                                        type: selectedWorkout.type,
                                                        generated:
                                                          selectedWorkout.generated,
                                                        duration:
                                                          selectedWorkout.duration,
                                                        relatedInjuries:
                                                          selectedWorkout.relatedInjuries,
                                                        injuries:
                                                          selectedWorkout.injuries,
                                                        mediaUrl:
                                                          selectedWorkout.mediaUrl,
                                                        holidayMode:
                                                          selectedWorkout.holidayMode,
                                                        userClone: true,
                                                        workoutSuperSetId:
                                                          selectedWorkout.workoutSuperSetId,
                                                      },
                                                    },
                                                  );

                                                await this.prisma.scheduleWorkout.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      planScheduleId:
                                                        planSchedule.id,
                                                      workoutId:
                                                        athleteWorkout.id,
                                                    },
                                                  },
                                                );

                                                const { WorkoutParts } =
                                                  selectedWorkout;
                                                for (const workoutPart of WorkoutParts) {
                                                  const {
                                                    comments,
                                                    breaks,
                                                    partExercises,
                                                    generatedExercises
                                                  } = workoutPart;
                                                  const athleteWorkoutPart =
                                                    await this.prisma.workoutParts.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          name: workoutPart.name,
                                                          position:
                                                            workoutPart.position,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                  //create comments
                                                  if (comments.length > 0) {
                                                    for (const comment of comments) {
                                                      await this.prisma.comment.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              comment.position,
                                                            comment:
                                                              comment.comment,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }
                                                  //create breaks
                                                  if (breaks.length > 0) {
                                                    for (const brk of breaks) {
                                                      await this.prisma.break.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              brk.position,
                                                            break: brk.break,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }

                                                  if (partExercises && partExercises.length > 0) {
                                                    for (const partExercise of partExercises) {

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              partExercise.benchmark,
                                                            intensity:
                                                              partExercise.intensity,
                                                            position:
                                                              partExercise.position,
                                                            fieldOne:
                                                              partExercise.fieldOne,
                                                            fieldTwo:
                                                              partExercise.fieldTwo,
                                                            reps: partExercise.reps,
                                                            sets: partExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              partExercise.exerciseId,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                  //extract generatedExercises and select an exercise to assign as partExercise
                                                  if (generatedExercises && generatedExercises.length > 0) {
                                                    for (const generatedExercise of generatedExercises) {

                                                      const { muscleGroup, exerciseType } = generatedExercise

                                                      const exercises = await this.prisma.exercise.findMany({
                                                        where: {
                                                          muscleGroup,
                                                          exerciseType
                                                        }
                                                      });

                                                      const randomExercise =
                                                        exercises[
                                                        Math.floor(
                                                          Math.random() *
                                                          exercises.length,
                                                        )
                                                        ];

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              generatedExercise.benchmark,
                                                            intensity:
                                                              generatedExercise.intensity,
                                                            position:
                                                              generatedExercise.position,
                                                            fieldOne:
                                                              generatedExercise.fieldOne,
                                                            fieldTwo:
                                                              generatedExercise.fieldTwo,
                                                            reps: generatedExercise.reps,
                                                            sets: generatedExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              randomExercise.id,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                }

                                                if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                                  for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryAfterWorkout.name,
                                                              type: selectedMandatoryAfterWorkout.type,
                                                              generated:
                                                                selectedMandatoryAfterWorkout.generated,
                                                              duration:
                                                                selectedMandatoryAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                                  for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionAfterWorkout.name,
                                                              type: selectedOptionAfterWorkout.type,
                                                              generated:
                                                                selectedOptionAfterWorkout.generated,
                                                              duration:
                                                                selectedOptionAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedOptionAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedOptionAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedOptionAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          } else if (
                                            thenClause === THEN_CLAUSE_LOW_INTENSITY.RestDay
                                          ) {
                                            //increment restDay counter
                                            restDayCounter = 1
                                          }
                                        }
                                      }
                                    } else if (backTrack === 3) {
                                      const highIntensityWorkoutTypeOne = ifClauses[0];
                                      const highIntensityWorkoutTypeTwo = ifClauses[1];
                                      const highIntensityWorkoutTypeThree = ifClauses[2];

                                      const fridayEvening = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Evening,
                                            day: DAY.Friday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const fridayMorning = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Morning,
                                            day: DAY.Friday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const satEvening = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Evening,
                                            day: DAY.Saturday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const satMorning = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Morning,
                                            day: DAY.Saturday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const sundayEvening = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Evening,
                                            day: DAY.Sunday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const sundayMorning = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Morning,
                                            day: DAY.Sunday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const fridayWorkoutTypes: string[] = [];
                                      const saturdayWorkoutTypes: string[] = [];
                                      const sundayWorkoutTypes: string[] = [];

                                      if (fridayEvening) {
                                        for (const scheduleWorkout of fridayEvening.scheduleWorkouts) {
                                          fridayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (fridayMorning) {
                                        for (const scheduleWorkout of fridayMorning.scheduleWorkouts) {
                                          fridayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (satEvening) {
                                        for (const scheduleWorkout of satEvening.scheduleWorkouts) {
                                          saturdayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (satMorning) {
                                        for (const scheduleWorkout of satMorning.scheduleWorkouts) {
                                          saturdayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (sundayEvening) {
                                        for (const scheduleWorkout of sundayEvening.scheduleWorkouts) {
                                          sundayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (sundayMorning) {
                                        for (const scheduleWorkout of sundayMorning.scheduleWorkouts) {
                                          sundayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      const allWorkoutTypes = [
                                        ...fridayWorkoutTypes,
                                        ...saturdayWorkoutTypes,
                                        ...sundayWorkoutTypes,
                                      ];

                                      // Check if all high-intensity workout types are present across Friday, Saturday, and Sunday
                                      const hasHighIntensityWorkouts =
                                        allWorkoutTypes.includes(highIntensityWorkoutTypeOne) &&
                                        allWorkoutTypes.includes(highIntensityWorkoutTypeTwo) &&
                                        allWorkoutTypes.includes(highIntensityWorkoutTypeThree);

                                      if (hasHighIntensityWorkouts) {
                                        if (
                                          thenClause ===
                                          THEN_CLAUSE_LOW_INTENSITY.LowIntensityWorkout
                                        ) {
                                          counter = counter + 1;
                                          lowIntensityCounter = 1;
                                          maxNonMissingCount = maxNonMissingCount + 1;

                                          const shuffledLowIntensityWorkoutTypes = this.shuffleArray(lowIntensityWorkoutTypes);

                                          let lowIntensityWorkoutCount = 0
                                          // Select one workout type randomly
                                          const randomLowIntensityWorkoutType = shuffledLowIntensityWorkoutTypes[
                                            Math.floor(Math.random() * shuffledLowIntensityWorkoutTypes.length)
                                          ];
                                          //check combination rules as well to see if anything comes before or after

                                          const combinationsRules = await this.prisma.combinationRules.findUnique({
                                            where: {
                                              planId: originalPlan.id,
                                            },
                                          })

                                          const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                            where: {
                                              combinationRulesId_workoutType: {
                                                combinationRulesId: combinationsRules.id,
                                                workoutType: randomLowIntensityWorkoutType,
                                              }
                                            },
                                            include: {
                                              workoutTypesCombinations: {
                                                orderBy: {
                                                  priority: 'asc'
                                                }
                                              }
                                            }
                                          })

                                          const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                          if (lowIntensityWorkoutCount !== 1) {
                                            let randomLowIntensityWorkout;
                                            const workouts = await this.prisma.workout.findMany({
                                              where: {
                                                type: randomLowIntensityWorkoutType,
                                                generated: true,
                                              },
                                            });

                                            // Randomize and pick one workout
                                            if (workouts.length > 0) {
                                              randomLowIntensityWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                              const selectedWorkout = await this.prisma.workout.findUnique(
                                                {
                                                  where: {
                                                    id: randomLowIntensityWorkout.id
                                                  },
                                                  include: {
                                                    WorkoutParts: {
                                                      include: {
                                                        comments: true,
                                                        breaks: true,
                                                        partExercises: {
                                                          include: {
                                                            exercise: true,
                                                          },
                                                        },
                                                        generatedExercises: true
                                                      },
                                                    },
                                                  },
                                                },
                                              );

                                              const existingPlanSchedule =
                                                await this.prisma.planSchedule.findFirst(
                                                  {
                                                    where: {
                                                      planId:
                                                        userPlan.planId,
                                                    },
                                                    orderBy: {
                                                      week: 'desc',
                                                    },
                                                  },
                                                );

                                              let planSchedule;
                                              if (existingPlanSchedule) {
                                                planSchedule =
                                                  await this.prisma.planSchedule.create(
                                                    {
                                                      data: {
                                                        week:
                                                          existingPlanSchedule.week +
                                                          1,
                                                        userClone: true,
                                                        planId:
                                                          userPlan.planId,
                                                        gymSession:
                                                          GYM_SESSION.Morning,
                                                        day: DAY.Monday,
                                                      },
                                                    },
                                                  );
                                              } else {
                                                planSchedule =
                                                  await this.prisma.planSchedule.create(
                                                    {
                                                      data: {
                                                        week: 1,
                                                        userClone: true,
                                                        planId:
                                                          userPlan.planId,
                                                        gymSession:
                                                          GYM_SESSION.Morning,
                                                        day: DAY.Monday,
                                                      },
                                                    },
                                                  );
                                              }

                                              let beforeMandatoryWorkoutTypes;
                                              let afterMandatoryWorkoutTypes;
                                              let beforeOptionalWorkoutTypes;
                                              let afterOptionalWorkoutTypes;
                                              for (const workoutTypesCombination of workoutTypesCombinations) {
                                                if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                  beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                  beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                                } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                  afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                  afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                                }
                                              }

                                              if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                                for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: beforeMandatoryWorkoutType,
                                                    },
                                                  });

                                                  let randomMandatoryWorkout
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomMandatoryWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedMandatoryWorkoutType.name,
                                                            type: selectedMandatoryWorkoutType.type,
                                                            generated:
                                                              selectedMandatoryWorkoutType.generated,
                                                            duration:
                                                              selectedMandatoryWorkoutType.duration,
                                                            relatedInjuries:
                                                              selectedMandatoryWorkoutType.relatedInjuries,
                                                            injuries:
                                                              selectedMandatoryWorkoutType.injuries,
                                                            mediaUrl:
                                                              selectedMandatoryWorkoutType.mediaUrl,
                                                            holidayMode:
                                                              selectedMandatoryWorkoutType.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedMandatoryWorkoutType.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedMandatoryWorkoutType;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                    }
                                                  }
                                                }
                                              }

                                              if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                                for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: beforeOptionalWorkoutType,
                                                    },
                                                  });

                                                  let randomOptionalBeforeWorkout;
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomOptionalBeforeWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedOptionalWorkoutType.name,
                                                            type: selectedOptionalWorkoutType.type,
                                                            generated:
                                                              selectedOptionalWorkoutType.generated,
                                                            duration:
                                                              selectedOptionalWorkoutType.duration,
                                                            relatedInjuries:
                                                              selectedOptionalWorkoutType.relatedInjuries,
                                                            injuries:
                                                              selectedOptionalWorkoutType.injuries,
                                                            mediaUrl:
                                                              selectedOptionalWorkoutType.mediaUrl,
                                                            holidayMode:
                                                              selectedOptionalWorkoutType.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedOptionalWorkoutType.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedOptionalWorkoutType;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                    }
                                                  }
                                                }
                                              }
                                              //TODO: add durationSeconds lateron
                                              const athleteWorkout =
                                                await this.prisma.workout.create(
                                                  {
                                                    data: {
                                                      name: selectedWorkout.name,
                                                      type: selectedWorkout.type,
                                                      generated:
                                                        selectedWorkout.generated,
                                                      duration:
                                                        selectedWorkout.duration,
                                                      relatedInjuries:
                                                        selectedWorkout.relatedInjuries,
                                                      injuries:
                                                        selectedWorkout.injuries,
                                                      mediaUrl:
                                                        selectedWorkout.mediaUrl,
                                                      holidayMode:
                                                        selectedWorkout.holidayMode,
                                                      userClone: true,
                                                      workoutSuperSetId:
                                                        selectedWorkout.workoutSuperSetId,
                                                    },
                                                  },
                                                );

                                              await this.prisma.scheduleWorkout.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    planScheduleId:
                                                      planSchedule.id,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                              const { WorkoutParts } =
                                                selectedWorkout;
                                              for (const workoutPart of WorkoutParts) {
                                                const {
                                                  comments,
                                                  breaks,
                                                  partExercises,
                                                  generatedExercises
                                                } = workoutPart;
                                                const athleteWorkoutPart =
                                                  await this.prisma.workoutParts.create(
                                                    {
                                                      data: {
                                                        userClone: true,
                                                        name: workoutPart.name,
                                                        position:
                                                          workoutPart.position,
                                                        workoutId:
                                                          athleteWorkout.id,
                                                      },
                                                    },
                                                  );

                                                //create comments
                                                if (comments.length > 0) {
                                                  for (const comment of comments) {
                                                    await this.prisma.comment.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          position:
                                                            comment.position,
                                                          comment:
                                                            comment.comment,
                                                          workoutPartsId:
                                                            athleteWorkoutPart.id,
                                                        },
                                                      },
                                                    );
                                                  }
                                                }
                                                //create breaks
                                                if (breaks.length > 0) {
                                                  for (const brk of breaks) {
                                                    await this.prisma.break.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          position:
                                                            brk.position,
                                                          break: brk.break,
                                                          workoutPartsId:
                                                            athleteWorkoutPart.id,
                                                        },
                                                      },
                                                    );
                                                  }
                                                }

                                                if (partExercises && partExercises.length > 0) {
                                                  for (const partExercise of partExercises) {

                                                    await this.prisma.partExercises.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          benchmark:
                                                            partExercise.benchmark,
                                                          intensity:
                                                            partExercise.intensity,
                                                          position:
                                                            partExercise.position,
                                                          fieldOne:
                                                            partExercise.fieldOne,
                                                          fieldTwo:
                                                            partExercise.fieldTwo,
                                                          reps: partExercise.reps,
                                                          sets: partExercise.sets,
                                                          partId:
                                                            athleteWorkoutPart.id,
                                                          exerciseId:
                                                            partExercise.exerciseId,
                                                        },
                                                      },
                                                    );

                                                  }
                                                }

                                                //extract generatedExercises and select an exercise to assign as partExercise
                                                if (generatedExercises && generatedExercises.length > 0) {
                                                  for (const generatedExercise of generatedExercises) {

                                                    const { muscleGroup, exerciseType } = generatedExercise

                                                    const exercises = await this.prisma.exercise.findMany({
                                                      where: {
                                                        muscleGroup,
                                                        exerciseType
                                                      }
                                                    });

                                                    const randomExercise =
                                                      exercises[
                                                      Math.floor(
                                                        Math.random() *
                                                        exercises.length,
                                                      )
                                                      ];

                                                    await this.prisma.partExercises.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          benchmark:
                                                            generatedExercise.benchmark,
                                                          intensity:
                                                            generatedExercise.intensity,
                                                          position:
                                                            generatedExercise.position,
                                                          fieldOne:
                                                            generatedExercise.fieldOne,
                                                          fieldTwo:
                                                            generatedExercise.fieldTwo,
                                                          reps: generatedExercise.reps,
                                                          sets: generatedExercise.sets,
                                                          partId:
                                                            athleteWorkoutPart.id,
                                                          exerciseId:
                                                            randomExercise.id,
                                                        },
                                                      },
                                                    );

                                                  }
                                                }

                                              }

                                              if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                                for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: afterMandatoryWorkoutType,
                                                    },
                                                  });

                                                  let randomMandatoryAfterWorkout;
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomMandatoryAfterWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedMandatoryAfterWorkout.name,
                                                            type: selectedMandatoryAfterWorkout.type,
                                                            generated:
                                                              selectedMandatoryAfterWorkout.generated,
                                                            duration:
                                                              selectedMandatoryAfterWorkout.duration,
                                                            relatedInjuries:
                                                              selectedMandatoryAfterWorkout.relatedInjuries,
                                                            injuries:
                                                              selectedMandatoryAfterWorkout.injuries,
                                                            mediaUrl:
                                                              selectedMandatoryAfterWorkout.mediaUrl,
                                                            holidayMode:
                                                              selectedMandatoryAfterWorkout.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedMandatoryAfterWorkout;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                    }
                                                  }
                                                }
                                              }

                                              if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                                for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: afterOptionalWorkoutType,
                                                    },
                                                  });

                                                  let randomOptionalAfterWorkout;
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomOptionalAfterWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedOptionAfterWorkout.name,
                                                            type: selectedOptionAfterWorkout.type,
                                                            generated:
                                                              selectedOptionAfterWorkout.generated,
                                                            duration:
                                                              selectedOptionAfterWorkout.duration,
                                                            relatedInjuries:
                                                              selectedOptionAfterWorkout.relatedInjuries,
                                                            injuries:
                                                              selectedOptionAfterWorkout.injuries,
                                                            mediaUrl:
                                                              selectedOptionAfterWorkout.mediaUrl,
                                                            holidayMode:
                                                              selectedOptionAfterWorkout.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedOptionAfterWorkout.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedOptionAfterWorkout;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } else if (
                                          thenClause === THEN_CLAUSE_LOW_INTENSITY.RestDay
                                        ) {
                                          //increment restDay counter
                                          restDayCounter = 1
                                        }
                                      }
                                    }
                                  }
                                }
                                if (lowIntensityCounter === 0 && restDayCounter === 0) {
                                  workoutOccurrence = workoutOccurrence + 1;
                                  counter = counter + 1;
                                  maxNonMissingCount = maxNonMissingCount + 1;

                                  //check combination rules as well to see if anything comes before or after

                                  const combinationsRules = await this.prisma.combinationRules.findUnique({
                                    where: {
                                      planId: originalPlan.id,
                                    },
                                  })

                                  const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                    where: {
                                      combinationRulesId_workoutType: {
                                        combinationRulesId: combinationsRules.id,
                                        workoutType: workoutType,
                                      }
                                    },
                                    include: {
                                      workoutTypesCombinations: {
                                        orderBy: {
                                          priority: 'asc'
                                        }
                                      }
                                    }
                                  })

                                  const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                  let randomWorkoutType;
                                  const workouts = await this.prisma.workout.findMany({
                                    where: {
                                      type: workoutType,
                                      generated: true,
                                    },
                                  });

                                  // Randomize and pick one workout
                                  if (workouts.length > 0) {
                                    randomWorkoutType = workouts[Math.floor(Math.random() * workouts.length)];

                                    const selectedWorkout = await this.prisma.workout.findUnique(
                                      {
                                        where: {
                                          id: randomWorkoutType.id
                                        },
                                        include: {
                                          WorkoutParts: {
                                            include: {
                                              comments: true,
                                              breaks: true,
                                              partExercises: {
                                                include: {
                                                  exercise: true,
                                                },
                                              },
                                              generatedExercises: true
                                            },
                                          },
                                        },
                                      },
                                    );

                                    const existingPlanSchedule =
                                      await this.prisma.planSchedule.findFirst(
                                        {
                                          where: {
                                            planId:
                                              userPlan.planId,
                                          },
                                          orderBy: {
                                            week: 'desc',
                                          },
                                        },
                                      );

                                    let planSchedule;
                                    if (existingPlanSchedule) {
                                      planSchedule =
                                        await this.prisma.planSchedule.create(
                                          {
                                            data: {
                                              week:
                                                existingPlanSchedule.week +
                                                1,
                                              userClone: true,
                                              planId:
                                                userPlan.planId,
                                              gymSession:
                                                GYM_SESSION.Morning,
                                              day: DAY.Monday,
                                            },
                                          },
                                        );
                                    } else {
                                      planSchedule =
                                        await this.prisma.planSchedule.create(
                                          {
                                            data: {
                                              week: 1,
                                              userClone: true,
                                              planId:
                                                userPlan.planId,
                                              gymSession:
                                                GYM_SESSION.Morning,
                                              day: DAY.Monday,
                                            },
                                          },
                                        );
                                    }

                                    let beforeMandatoryWorkoutTypes;
                                    let afterMandatoryWorkoutTypes;
                                    let beforeOptionalWorkoutTypes;
                                    let afterOptionalWorkoutTypes;
                                    for (const workoutTypesCombination of workoutTypesCombinations) {
                                      if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                        beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                      } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                        beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                      } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                        afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                      } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                        afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                      }
                                    }

                                    if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                      for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: beforeMandatoryWorkoutType,
                                          },
                                        });

                                        let randomMandatoryWorkout
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomMandatoryWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedMandatoryWorkoutType.name,
                                                  type: selectedMandatoryWorkoutType.type,
                                                  generated:
                                                    selectedMandatoryWorkoutType.generated,
                                                  duration:
                                                    selectedMandatoryWorkoutType.duration,
                                                  relatedInjuries:
                                                    selectedMandatoryWorkoutType.relatedInjuries,
                                                  injuries:
                                                    selectedMandatoryWorkoutType.injuries,
                                                  mediaUrl:
                                                    selectedMandatoryWorkoutType.mediaUrl,
                                                  holidayMode:
                                                    selectedMandatoryWorkoutType.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedMandatoryWorkoutType.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedMandatoryWorkoutType;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                          }
                                        }
                                      }
                                    }

                                    if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                      for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: beforeOptionalWorkoutType,
                                          },
                                        });

                                        let randomOptionalBeforeWorkout;
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomOptionalBeforeWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedOptionalWorkoutType.name,
                                                  type: selectedOptionalWorkoutType.type,
                                                  generated:
                                                    selectedOptionalWorkoutType.generated,
                                                  duration:
                                                    selectedOptionalWorkoutType.duration,
                                                  relatedInjuries:
                                                    selectedOptionalWorkoutType.relatedInjuries,
                                                  injuries:
                                                    selectedOptionalWorkoutType.injuries,
                                                  mediaUrl:
                                                    selectedOptionalWorkoutType.mediaUrl,
                                                  holidayMode:
                                                    selectedOptionalWorkoutType.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedOptionalWorkoutType.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedOptionalWorkoutType;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                          }
                                        }
                                      }
                                    }
                                    //TODO: add durationSeconds lateron
                                    const athleteWorkout =
                                      await this.prisma.workout.create(
                                        {
                                          data: {
                                            name: selectedWorkout.name,
                                            type: selectedWorkout.type,
                                            generated:
                                              selectedWorkout.generated,
                                            duration:
                                              selectedWorkout.duration,
                                            relatedInjuries:
                                              selectedWorkout.relatedInjuries,
                                            injuries:
                                              selectedWorkout.injuries,
                                            mediaUrl:
                                              selectedWorkout.mediaUrl,
                                            holidayMode:
                                              selectedWorkout.holidayMode,
                                            userClone: true,
                                            workoutSuperSetId:
                                              selectedWorkout.workoutSuperSetId,
                                          },
                                        },
                                      );

                                    await this.prisma.scheduleWorkout.create(
                                      {
                                        data: {
                                          userClone: true,
                                          planScheduleId:
                                            planSchedule.id,
                                          workoutId:
                                            athleteWorkout.id,
                                        },
                                      },
                                    );

                                    const { WorkoutParts } =
                                      selectedWorkout;
                                    for (const workoutPart of WorkoutParts) {
                                      const {
                                        comments,
                                        breaks,
                                        partExercises,
                                        generatedExercises
                                      } = workoutPart;
                                      const athleteWorkoutPart =
                                        await this.prisma.workoutParts.create(
                                          {
                                            data: {
                                              userClone: true,
                                              name: workoutPart.name,
                                              position:
                                                workoutPart.position,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                      //create comments
                                      if (comments.length > 0) {
                                        for (const comment of comments) {
                                          await this.prisma.comment.create(
                                            {
                                              data: {
                                                userClone: true,
                                                position:
                                                  comment.position,
                                                comment:
                                                  comment.comment,
                                                workoutPartsId:
                                                  athleteWorkoutPart.id,
                                              },
                                            },
                                          );
                                        }
                                      }
                                      //create breaks
                                      if (breaks.length > 0) {
                                        for (const brk of breaks) {
                                          await this.prisma.break.create(
                                            {
                                              data: {
                                                userClone: true,
                                                position:
                                                  brk.position,
                                                break: brk.break,
                                                workoutPartsId:
                                                  athleteWorkoutPart.id,
                                              },
                                            },
                                          );
                                        }
                                      }

                                      if (partExercises && partExercises.length > 0) {
                                        for (const partExercise of partExercises) {

                                          await this.prisma.partExercises.create(
                                            {
                                              data: {
                                                userClone: true,
                                                benchmark:
                                                  partExercise.benchmark,
                                                intensity:
                                                  partExercise.intensity,
                                                position:
                                                  partExercise.position,
                                                fieldOne:
                                                  partExercise.fieldOne,
                                                fieldTwo:
                                                  partExercise.fieldTwo,
                                                reps: partExercise.reps,
                                                sets: partExercise.sets,
                                                partId:
                                                  athleteWorkoutPart.id,
                                                exerciseId:
                                                  partExercise.exerciseId,
                                              },
                                            },
                                          );

                                        }
                                      }

                                      //extract generatedExercises and select an exercise to assign as partExercise
                                      if (generatedExercises && generatedExercises.length > 0) {
                                        for (const generatedExercise of generatedExercises) {

                                          const { muscleGroup, exerciseType } = generatedExercise

                                          const exercises = await this.prisma.exercise.findMany({
                                            where: {
                                              muscleGroup,
                                              exerciseType
                                            }
                                          });

                                          const randomExercise =
                                            exercises[
                                            Math.floor(
                                              Math.random() *
                                              exercises.length,
                                            )
                                            ];

                                          await this.prisma.partExercises.create(
                                            {
                                              data: {
                                                userClone: true,
                                                benchmark:
                                                  generatedExercise.benchmark,
                                                intensity:
                                                  generatedExercise.intensity,
                                                position:
                                                  generatedExercise.position,
                                                fieldOne:
                                                  generatedExercise.fieldOne,
                                                fieldTwo:
                                                  generatedExercise.fieldTwo,
                                                reps: generatedExercise.reps,
                                                sets: generatedExercise.sets,
                                                partId:
                                                  athleteWorkoutPart.id,
                                                exerciseId:
                                                  randomExercise.id,
                                              },
                                            },
                                          );

                                        }
                                      }

                                    }

                                    if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                      for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: afterMandatoryWorkoutType,
                                          },
                                        });

                                        let randomMandatoryAfterWorkout;
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomMandatoryAfterWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedMandatoryAfterWorkout.name,
                                                  type: selectedMandatoryAfterWorkout.type,
                                                  generated:
                                                    selectedMandatoryAfterWorkout.generated,
                                                  duration:
                                                    selectedMandatoryAfterWorkout.duration,
                                                  relatedInjuries:
                                                    selectedMandatoryAfterWorkout.relatedInjuries,
                                                  injuries:
                                                    selectedMandatoryAfterWorkout.injuries,
                                                  mediaUrl:
                                                    selectedMandatoryAfterWorkout.mediaUrl,
                                                  holidayMode:
                                                    selectedMandatoryAfterWorkout.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedMandatoryAfterWorkout;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                          }
                                        }
                                      }
                                    }

                                    if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                      for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: afterOptionalWorkoutType,
                                          },
                                        });

                                        let randomOptionalAfterWorkout;
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomOptionalAfterWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedOptionAfterWorkout.name,
                                                  type: selectedOptionAfterWorkout.type,
                                                  generated:
                                                    selectedOptionAfterWorkout.generated,
                                                  duration:
                                                    selectedOptionAfterWorkout.duration,
                                                  relatedInjuries:
                                                    selectedOptionAfterWorkout.relatedInjuries,
                                                  injuries:
                                                    selectedOptionAfterWorkout.injuries,
                                                  mediaUrl:
                                                    selectedOptionAfterWorkout.mediaUrl,
                                                  holidayMode:
                                                    selectedOptionAfterWorkout.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedOptionAfterWorkout.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedOptionAfterWorkout;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              } else {
                                workoutOccurrence = workoutOccurrence + 1;
                                counter = counter + 1;
                                maxNonMissingCount = maxNonMissingCount + 1;

                                //check combination rules as well to see if anything comes before or after

                                const combinationsRules = await this.prisma.combinationRules.findUnique({
                                  where: {
                                    planId: originalPlan.id,
                                  },
                                })

                                const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                  where: {
                                    combinationRulesId_workoutType: {
                                      combinationRulesId: combinationsRules.id,
                                      workoutType: workoutType,
                                    }
                                  },
                                  include: {
                                    workoutTypesCombinations: {
                                      orderBy: {
                                        priority: 'asc'
                                      }
                                    }
                                  }
                                })

                                const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                let randomWorkoutType;
                                const workouts = await this.prisma.workout.findMany({
                                  where: {
                                    type: workoutType,
                                    generated: true,
                                  },
                                });

                                // Randomize and pick one workout
                                if (workouts.length > 0) {
                                  randomWorkoutType = workouts[Math.floor(Math.random() * workouts.length)];

                                  const selectedWorkout = await this.prisma.workout.findUnique(
                                    {
                                      where: {
                                        id: randomWorkoutType.id
                                      },
                                      include: {
                                        WorkoutParts: {
                                          include: {
                                            comments: true,
                                            breaks: true,
                                            partExercises: {
                                              include: {
                                                exercise: true,
                                              },
                                            },
                                            generatedExercises: true
                                          },
                                        },
                                      },
                                    },
                                  );

                                  const existingPlanSchedule =
                                    await this.prisma.planSchedule.findFirst(
                                      {
                                        where: {
                                          planId:
                                            userPlan.planId,
                                        },
                                        orderBy: {
                                          week: 'desc',
                                        },
                                      },
                                    );

                                  let planSchedule;
                                  if (existingPlanSchedule) {
                                    planSchedule =
                                      await this.prisma.planSchedule.create(
                                        {
                                          data: {
                                            week:
                                              existingPlanSchedule.week +
                                              1,
                                            userClone: true,
                                            planId:
                                              userPlan.planId,
                                            gymSession:
                                              GYM_SESSION.Morning,
                                            day: DAY.Monday,
                                          },
                                        },
                                      );
                                  } else {
                                    planSchedule =
                                      await this.prisma.planSchedule.create(
                                        {
                                          data: {
                                            week: 1,
                                            userClone: true,
                                            planId:
                                              userPlan.planId,
                                            gymSession:
                                              GYM_SESSION.Morning,
                                            day: DAY.Monday,
                                          },
                                        },
                                      );
                                  }

                                  let beforeMandatoryWorkoutTypes;
                                  let afterMandatoryWorkoutTypes;
                                  let beforeOptionalWorkoutTypes;
                                  let afterOptionalWorkoutTypes;
                                  for (const workoutTypesCombination of workoutTypesCombinations) {
                                    if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                      beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                    } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                      beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                    } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                      afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                    } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                      afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                    }
                                  }

                                  if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                    for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: beforeMandatoryWorkoutType,
                                        },
                                      });

                                      let randomMandatoryWorkout
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomMandatoryWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedMandatoryWorkoutType.name,
                                                type: selectedMandatoryWorkoutType.type,
                                                generated:
                                                  selectedMandatoryWorkoutType.generated,
                                                duration:
                                                  selectedMandatoryWorkoutType.duration,
                                                relatedInjuries:
                                                  selectedMandatoryWorkoutType.relatedInjuries,
                                                injuries:
                                                  selectedMandatoryWorkoutType.injuries,
                                                mediaUrl:
                                                  selectedMandatoryWorkoutType.mediaUrl,
                                                holidayMode:
                                                  selectedMandatoryWorkoutType.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedMandatoryWorkoutType.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedMandatoryWorkoutType;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                        }
                                      }
                                    }
                                  }

                                  if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                    for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: beforeOptionalWorkoutType,
                                        },
                                      });

                                      let randomOptionalBeforeWorkout;
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomOptionalBeforeWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedOptionalWorkoutType.name,
                                                type: selectedOptionalWorkoutType.type,
                                                generated:
                                                  selectedOptionalWorkoutType.generated,
                                                duration:
                                                  selectedOptionalWorkoutType.duration,
                                                relatedInjuries:
                                                  selectedOptionalWorkoutType.relatedInjuries,
                                                injuries:
                                                  selectedOptionalWorkoutType.injuries,
                                                mediaUrl:
                                                  selectedOptionalWorkoutType.mediaUrl,
                                                holidayMode:
                                                  selectedOptionalWorkoutType.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedOptionalWorkoutType.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedOptionalWorkoutType;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                        }
                                      }
                                    }
                                  }
                                  //TODO: add durationSeconds lateron
                                  const athleteWorkout =
                                    await this.prisma.workout.create(
                                      {
                                        data: {
                                          name: selectedWorkout.name,
                                          type: selectedWorkout.type,
                                          generated:
                                            selectedWorkout.generated,
                                          duration:
                                            selectedWorkout.duration,
                                          relatedInjuries:
                                            selectedWorkout.relatedInjuries,
                                          injuries:
                                            selectedWorkout.injuries,
                                          mediaUrl:
                                            selectedWorkout.mediaUrl,
                                          holidayMode:
                                            selectedWorkout.holidayMode,
                                          userClone: true,
                                          workoutSuperSetId:
                                            selectedWorkout.workoutSuperSetId,
                                        },
                                      },
                                    );

                                  await this.prisma.scheduleWorkout.create(
                                    {
                                      data: {
                                        userClone: true,
                                        planScheduleId:
                                          planSchedule.id,
                                        workoutId:
                                          athleteWorkout.id,
                                      },
                                    },
                                  );

                                  const { WorkoutParts } =
                                    selectedWorkout;
                                  for (const workoutPart of WorkoutParts) {
                                    const {
                                      comments,
                                      breaks,
                                      partExercises,
                                      generatedExercises
                                    } = workoutPart;
                                    const athleteWorkoutPart =
                                      await this.prisma.workoutParts.create(
                                        {
                                          data: {
                                            userClone: true,
                                            name: workoutPart.name,
                                            position:
                                              workoutPart.position,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                    //create comments
                                    if (comments.length > 0) {
                                      for (const comment of comments) {
                                        await this.prisma.comment.create(
                                          {
                                            data: {
                                              userClone: true,
                                              position:
                                                comment.position,
                                              comment:
                                                comment.comment,
                                              workoutPartsId:
                                                athleteWorkoutPart.id,
                                            },
                                          },
                                        );
                                      }
                                    }
                                    //create breaks
                                    if (breaks.length > 0) {
                                      for (const brk of breaks) {
                                        await this.prisma.break.create(
                                          {
                                            data: {
                                              userClone: true,
                                              position:
                                                brk.position,
                                              break: brk.break,
                                              workoutPartsId:
                                                athleteWorkoutPart.id,
                                            },
                                          },
                                        );
                                      }
                                    }

                                    if (partExercises && partExercises.length > 0) {
                                      for (const partExercise of partExercises) {

                                        await this.prisma.partExercises.create(
                                          {
                                            data: {
                                              userClone: true,
                                              benchmark:
                                                partExercise.benchmark,
                                              intensity:
                                                partExercise.intensity,
                                              position:
                                                partExercise.position,
                                              fieldOne:
                                                partExercise.fieldOne,
                                              fieldTwo:
                                                partExercise.fieldTwo,
                                              reps: partExercise.reps,
                                              sets: partExercise.sets,
                                              partId:
                                                athleteWorkoutPart.id,
                                              exerciseId:
                                                partExercise.exerciseId,
                                            },
                                          },
                                        );

                                      }
                                    }

                                    //extract generatedExercises and select an exercise to assign as partExercise
                                    if (generatedExercises && generatedExercises.length > 0) {
                                      for (const generatedExercise of generatedExercises) {

                                        const { muscleGroup, exerciseType } = generatedExercise

                                        const exercises = await this.prisma.exercise.findMany({
                                          where: {
                                            muscleGroup,
                                            exerciseType
                                          }
                                        });

                                        const randomExercise =
                                          exercises[
                                          Math.floor(
                                            Math.random() *
                                            exercises.length,
                                          )
                                          ];

                                        await this.prisma.partExercises.create(
                                          {
                                            data: {
                                              userClone: true,
                                              benchmark:
                                                generatedExercise.benchmark,
                                              intensity:
                                                generatedExercise.intensity,
                                              position:
                                                generatedExercise.position,
                                              fieldOne:
                                                generatedExercise.fieldOne,
                                              fieldTwo:
                                                generatedExercise.fieldTwo,
                                              reps: generatedExercise.reps,
                                              sets: generatedExercise.sets,
                                              partId:
                                                athleteWorkoutPart.id,
                                              exerciseId:
                                                randomExercise.id,
                                            },
                                          },
                                        );

                                      }
                                    }

                                  }

                                  if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                    for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: afterMandatoryWorkoutType,
                                        },
                                      });

                                      let randomMandatoryAfterWorkout;
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomMandatoryAfterWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedMandatoryAfterWorkout.name,
                                                type: selectedMandatoryAfterWorkout.type,
                                                generated:
                                                  selectedMandatoryAfterWorkout.generated,
                                                duration:
                                                  selectedMandatoryAfterWorkout.duration,
                                                relatedInjuries:
                                                  selectedMandatoryAfterWorkout.relatedInjuries,
                                                injuries:
                                                  selectedMandatoryAfterWorkout.injuries,
                                                mediaUrl:
                                                  selectedMandatoryAfterWorkout.mediaUrl,
                                                holidayMode:
                                                  selectedMandatoryAfterWorkout.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedMandatoryAfterWorkout.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedMandatoryAfterWorkout;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                        }
                                      }
                                    }
                                  }

                                  if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                    for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: afterOptionalWorkoutType,
                                        },
                                      });

                                      let randomOptionalAfterWorkout;
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomOptionalAfterWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedOptionAfterWorkout.name,
                                                type: selectedOptionAfterWorkout.type,
                                                generated:
                                                  selectedOptionAfterWorkout.generated,
                                                duration:
                                                  selectedOptionAfterWorkout.duration,
                                                relatedInjuries:
                                                  selectedOptionAfterWorkout.relatedInjuries,
                                                injuries:
                                                  selectedOptionAfterWorkout.injuries,
                                                mediaUrl:
                                                  selectedOptionAfterWorkout.mediaUrl,
                                                holidayMode:
                                                  selectedOptionAfterWorkout.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedOptionAfterWorkout.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedOptionAfterWorkout;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }

                              }
                            }
                          }
                        } else if (
                          weekDaySetting.session === GYM_SESSION.Evening
                        ) {
                          const exist =
                            await this.prisma.planSchedule.findUnique({
                              where: {
                                week_day_gymSession_planId: {
                                  week: existingPlanSchedule.week + 1,
                                  planId: userPlan.planId,
                                  gymSession: GYM_SESSION.Evening,
                                  day: DAY.Monday,
                                },
                              },
                              include: {
                                scheduleWorkouts: {
                                  include: {
                                    workout: true,
                                  },
                                },
                              },
                            });

                          if (!exist) {
                            //check break rules
                            const breakRules =
                              await this.prisma.breakRules.findMany({
                                where: {
                                  planId: originalPlan.id,
                                  workoutType,
                                },
                              });

                            let twoDayBefore = true;
                            let oneHalfDayBefore = true;
                            let oneDayBefore = true;
                            let oneDayAfter = true;
                            let oneHalfDayAfter = true;
                            let twoDayAfter = true;

                            for (const breakRule of breakRules) {
                              if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayBefore
                              ) {
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorningWorkoutTypes: string[] = [];
                                const sunMorningWorkoutTypes: string[] = [];
                                const sunEveningWorkoutTypes: string[] = [];
                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunMorning) {
                                  for (const scheduleWorkout of sunMorning?.scheduleWorkouts) {
                                    sunMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monMorningWorkoutTypes.includes(type) ||
                                      sunMorningWorkoutTypes.includes(type) ||
                                      sunEveningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayBefore = true;
                                } else {
                                  twoDayBefore = false;
                                }

                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneHalfDayBefore
                              ) {
                                //Monday 1.5 ===> Sat Evening
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorningWorkoutTypes: string[] = [];
                                const sunEveningWorkoutTypes: string[] = [];

                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monMorningWorkoutTypes.includes(type) ||
                                      sunEveningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayBefore = true;
                                  //means no break
                                } else {
                                  oneHalfDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneDayBefore
                              ) {
                                //Monday 1 ===> Sun Morning

                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorningWorkoutTypes: string[] = [];

                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some((type) =>
                                    monMorningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneDayBefore = true;
                                  //means no break
                                } else {
                                  oneDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayAfter
                              ) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const wedMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Wednesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const wedMorningWorkoutTypes: string[] = [];
                                const tueEveningWorkoutTypes: string[] = [];
                                const tueMorningWorkoutTypes: string[] = [];
                                if (wedMorning) {
                                  for (const scheduleWorkout of wedMorning?.scheduleWorkouts) {
                                    wedMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      wedMorningWorkoutTypes.includes(type) ||
                                      tueEveningWorkoutTypes.includes(type) ||
                                      tueMorningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayAfter = true;
                                } else {
                                  twoDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneHalfDayAfter) {
                                //Monday 1.5 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueEveningWorkoutTypes: string[] = [];
                                const tueMorningWorkoutTypes: string[] = [];
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      tueEveningWorkoutTypes.includes(type) ||
                                      tueMorningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayAfter = true;
                                } else {
                                  oneHalfDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneDayAfter) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });


                                const tueMorningWorkoutTypes: string[] = [];
                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }


                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      tueMorningWorkoutTypes.includes(type)
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneDayAfter = true;
                                } else {
                                  oneDayAfter = false;
                                }

                              }
                            }

                            if (twoDayBefore && oneHalfDayBefore && oneDayBefore && oneDayAfter && oneDayAfter && oneHalfDayAfter && twoDayAfter) {
                              //don't check low intensity workout rules in evenings

                              workoutOccurrence = workoutOccurrence + 1;
                              counter = counter + 1;
                              maxNonMissingCount = maxNonMissingCount + 1;

                              //check combination rules as well to see if anything comes before or after

                              const combinationsRules = await this.prisma.combinationRules.findUnique({
                                where: {
                                  planId: originalPlan.id,
                                },
                              })

                              const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                where: {
                                  combinationRulesId_workoutType: {
                                    combinationRulesId: combinationsRules.id,
                                    workoutType: workoutType,
                                  }
                                },
                                include: {
                                  workoutTypesCombinations: {
                                    orderBy: {
                                      priority: 'asc'
                                    }
                                  }
                                }
                              })

                              const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                              let randomWorkoutType;
                              const workouts = await this.prisma.workout.findMany({
                                where: {
                                  type: workoutType,
                                  generated: true,
                                },
                              });

                              // Randomize and pick one workout
                              if (workouts.length > 0) {
                                randomWorkoutType = workouts[Math.floor(Math.random() * workouts.length)];

                                const selectedWorkout = await this.prisma.workout.findUnique(
                                  {
                                    where: {
                                      id: randomWorkoutType.id
                                    },
                                    include: {
                                      WorkoutParts: {
                                        include: {
                                          comments: true,
                                          breaks: true,
                                          partExercises: {
                                            include: {
                                              exercise: true,
                                            },
                                          },
                                          generatedExercises: true
                                        },
                                      },
                                    },
                                  },
                                );

                                const existingPlanSchedule =
                                  await this.prisma.planSchedule.findFirst(
                                    {
                                      where: {
                                        planId:
                                          userPlan.planId,
                                      },
                                      orderBy: {
                                        week: 'desc',
                                      },
                                    },
                                  );

                                let planSchedule;
                                if (existingPlanSchedule) {
                                  planSchedule =
                                    await this.prisma.planSchedule.create(
                                      {
                                        data: {
                                          week:
                                            existingPlanSchedule.week +
                                            1,
                                          userClone: true,
                                          planId:
                                            userPlan.planId,
                                          gymSession:
                                            GYM_SESSION.Evening,
                                          day: DAY.Monday,
                                        },
                                      },
                                    );
                                } else {
                                  planSchedule =
                                    await this.prisma.planSchedule.create(
                                      {
                                        data: {
                                          week: 1,
                                          userClone: true,
                                          planId:
                                            userPlan.planId,
                                          gymSession:
                                            GYM_SESSION.Evening,
                                          day: DAY.Monday,
                                        },
                                      },
                                    );
                                }

                                let beforeMandatoryWorkoutTypes;
                                let afterMandatoryWorkoutTypes;
                                let beforeOptionalWorkoutTypes;
                                let afterOptionalWorkoutTypes;
                                for (const workoutTypesCombination of workoutTypesCombinations) {
                                  if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                    beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                    beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                    afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                    afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                  }
                                }

                                if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                  for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: beforeMandatoryWorkoutType,
                                      },
                                    });

                                    let randomMandatoryWorkout
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomMandatoryWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedMandatoryWorkoutType.name,
                                              type: selectedMandatoryWorkoutType.type,
                                              generated:
                                                selectedMandatoryWorkoutType.generated,
                                              duration:
                                                selectedMandatoryWorkoutType.duration,
                                              relatedInjuries:
                                                selectedMandatoryWorkoutType.relatedInjuries,
                                              injuries:
                                                selectedMandatoryWorkoutType.injuries,
                                              mediaUrl:
                                                selectedMandatoryWorkoutType.mediaUrl,
                                              holidayMode:
                                                selectedMandatoryWorkoutType.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedMandatoryWorkoutType.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedMandatoryWorkoutType;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }

                                      }
                                    }
                                  }
                                }

                                if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                  for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: beforeOptionalWorkoutType,
                                      },
                                    });

                                    let randomOptionalBeforeWorkout;
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomOptionalBeforeWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedOptionalWorkoutType.name,
                                              type: selectedOptionalWorkoutType.type,
                                              generated:
                                                selectedOptionalWorkoutType.generated,
                                              duration:
                                                selectedOptionalWorkoutType.duration,
                                              relatedInjuries:
                                                selectedOptionalWorkoutType.relatedInjuries,
                                              injuries:
                                                selectedOptionalWorkoutType.injuries,
                                              mediaUrl:
                                                selectedOptionalWorkoutType.mediaUrl,
                                              holidayMode:
                                                selectedOptionalWorkoutType.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedOptionalWorkoutType.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedOptionalWorkoutType;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }

                                      }
                                    }
                                  }
                                }
                                //TODO: add durationSeconds lateron
                                const athleteWorkout =
                                  await this.prisma.workout.create(
                                    {
                                      data: {
                                        name: selectedWorkout.name,
                                        type: selectedWorkout.type,
                                        generated:
                                          selectedWorkout.generated,
                                        duration:
                                          selectedWorkout.duration,
                                        relatedInjuries:
                                          selectedWorkout.relatedInjuries,
                                        injuries:
                                          selectedWorkout.injuries,
                                        mediaUrl:
                                          selectedWorkout.mediaUrl,
                                        holidayMode:
                                          selectedWorkout.holidayMode,
                                        userClone: true,
                                        workoutSuperSetId:
                                          selectedWorkout.workoutSuperSetId,
                                      },
                                    },
                                  );

                                await this.prisma.scheduleWorkout.create(
                                  {
                                    data: {
                                      userClone: true,
                                      planScheduleId:
                                        planSchedule.id,
                                      workoutId:
                                        athleteWorkout.id,
                                    },
                                  },
                                );

                                const { WorkoutParts } =
                                  selectedWorkout;
                                for (const workoutPart of WorkoutParts) {
                                  const {
                                    comments,
                                    breaks,
                                    partExercises,
                                    generatedExercises
                                  } = workoutPart;
                                  const athleteWorkoutPart =
                                    await this.prisma.workoutParts.create(
                                      {
                                        data: {
                                          userClone: true,
                                          name: workoutPart.name,
                                          position:
                                            workoutPart.position,
                                          workoutId:
                                            athleteWorkout.id,
                                        },
                                      },
                                    );

                                  //create comments
                                  if (comments.length > 0) {
                                    for (const comment of comments) {
                                      await this.prisma.comment.create(
                                        {
                                          data: {
                                            userClone: true,
                                            position:
                                              comment.position,
                                            comment:
                                              comment.comment,
                                            workoutPartsId:
                                              athleteWorkoutPart.id,
                                          },
                                        },
                                      );
                                    }
                                  }
                                  //create breaks
                                  if (breaks.length > 0) {
                                    for (const brk of breaks) {
                                      await this.prisma.break.create(
                                        {
                                          data: {
                                            userClone: true,
                                            position:
                                              brk.position,
                                            break: brk.break,
                                            workoutPartsId:
                                              athleteWorkoutPart.id,
                                          },
                                        },
                                      );
                                    }
                                  }

                                  if (partExercises && partExercises.length > 0) {
                                    for (const partExercise of partExercises) {

                                      await this.prisma.partExercises.create(
                                        {
                                          data: {
                                            userClone: true,
                                            benchmark:
                                              partExercise.benchmark,
                                            intensity:
                                              partExercise.intensity,
                                            position:
                                              partExercise.position,
                                            fieldOne:
                                              partExercise.fieldOne,
                                            fieldTwo:
                                              partExercise.fieldTwo,
                                            reps: partExercise.reps,
                                            sets: partExercise.sets,
                                            partId:
                                              athleteWorkoutPart.id,
                                            exerciseId:
                                              partExercise.exerciseId,
                                          },
                                        },
                                      );

                                    }
                                  }

                                  //extract generatedExercises and select an exercise to assign as partExercise
                                  if (generatedExercises && generatedExercises.length > 0) {
                                    for (const generatedExercise of generatedExercises) {

                                      const { muscleGroup, exerciseType } = generatedExercise

                                      const exercises = await this.prisma.exercise.findMany({
                                        where: {
                                          muscleGroup,
                                          exerciseType
                                        }
                                      });

                                      const randomExercise =
                                        exercises[
                                        Math.floor(
                                          Math.random() *
                                          exercises.length,
                                        )
                                        ];

                                      await this.prisma.partExercises.create(
                                        {
                                          data: {
                                            userClone: true,
                                            benchmark:
                                              generatedExercise.benchmark,
                                            intensity:
                                              generatedExercise.intensity,
                                            position:
                                              generatedExercise.position,
                                            fieldOne:
                                              generatedExercise.fieldOne,
                                            fieldTwo:
                                              generatedExercise.fieldTwo,
                                            reps: generatedExercise.reps,
                                            sets: generatedExercise.sets,
                                            partId:
                                              athleteWorkoutPart.id,
                                            exerciseId:
                                              randomExercise.id,
                                          },
                                        },
                                      );

                                    }
                                  }

                                }

                                if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                  for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: afterMandatoryWorkoutType,
                                      },
                                    });

                                    let randomMandatoryAfterWorkout;
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomMandatoryAfterWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedMandatoryAfterWorkout.name,
                                              type: selectedMandatoryAfterWorkout.type,
                                              generated:
                                                selectedMandatoryAfterWorkout.generated,
                                              duration:
                                                selectedMandatoryAfterWorkout.duration,
                                              relatedInjuries:
                                                selectedMandatoryAfterWorkout.relatedInjuries,
                                              injuries:
                                                selectedMandatoryAfterWorkout.injuries,
                                              mediaUrl:
                                                selectedMandatoryAfterWorkout.mediaUrl,
                                              holidayMode:
                                                selectedMandatoryAfterWorkout.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedMandatoryAfterWorkout.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedMandatoryAfterWorkout;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }

                                      }
                                    }
                                  }
                                }

                                if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                  for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: afterOptionalWorkoutType,
                                      },
                                    });

                                    let randomOptionalAfterWorkout;
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomOptionalAfterWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedOptionAfterWorkout.name,
                                              type: selectedOptionAfterWorkout.type,
                                              generated:
                                                selectedOptionAfterWorkout.generated,
                                              duration:
                                                selectedOptionAfterWorkout.duration,
                                              relatedInjuries:
                                                selectedOptionAfterWorkout.relatedInjuries,
                                              injuries:
                                                selectedOptionAfterWorkout.injuries,
                                              mediaUrl:
                                                selectedOptionAfterWorkout.mediaUrl,
                                              holidayMode:
                                                selectedOptionAfterWorkout.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedOptionAfterWorkout.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedOptionAfterWorkout;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }


                            }
                          }
                        }
                      } else {
                        maxNonMissingCount = 0;
                      }
                    } else if (weekDaySetting.day === DAY.Tuesday) {
                      //check restDay rules
                      if (maxNonMissingCount !== restDays) {

                        if (weekDaySetting.session === GYM_SESSION.Morning) {
                          const exist =
                            await this.prisma.planSchedule.findUnique({
                              where: {
                                week_day_gymSession_planId: {
                                  week: existingPlanSchedule.week + 1,
                                  planId: userPlan.planId,
                                  gymSession: GYM_SESSION.Morning,
                                  day: DAY.Tuesday,
                                },
                              },
                              include: {
                                scheduleWorkouts: {
                                  include: {
                                    workout: true,
                                  },
                                },
                              },
                            });

                          if (!exist) {
                            //check break rules
                            const breakRules =
                              await this.prisma.breakRules.findMany({
                                where: {
                                  planId: originalPlan.id,
                                  workoutType,
                                },
                              });

                            let twoDayBefore = true;
                            let oneHalfDayBefore = true;
                            let oneDayBefore = true;
                            let oneDayAfter = true;
                            let oneHalfDayAfter = true;
                            let twoDayAfter = true;

                            for (const breakRule of breakRules) {
                              if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayBefore
                              ) {
                                //Monday 2 ===> Sat Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const monEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monEveningWorkoutTypes: string[] = [];
                                const monMorningWorkoutTypes: string[] = [];
                                const sunEveningWorkoutTypes: string[] = [];
                                if (monEvening) {
                                  for (const scheduleWorkout of monEvening?.scheduleWorkouts) {
                                    monEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monEveningWorkoutTypes.includes(type) ||
                                      monMorningWorkoutTypes.includes(type) ||
                                      sunEveningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayBefore = true;
                                } else {
                                  twoDayBefore = false;
                                }

                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneHalfDayBefore
                              ) {
                                //Monday 1.5 ===> Sat Evening
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorningWorkoutTypes: string[] = [];
                                const monEveningWorkoutTypes: string[] = [];

                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (monEvening) {
                                  for (const scheduleWorkout of monEvening?.scheduleWorkouts) {
                                    monEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monMorningWorkoutTypes.includes(type) ||
                                      monEveningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayBefore = true;
                                  //means no break
                                } else {
                                  oneHalfDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneDayBefore
                              ) {
                                //Monday 1 ===> Sun Morning

                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const monEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monEveningWorkoutTypes: string[] = [];

                                if (monEvening) {
                                  for (const scheduleWorkout of monEvening?.scheduleWorkouts) {
                                    monEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some((type) =>
                                    monEveningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneDayBefore = true;
                                  //means no break
                                } else {
                                  oneDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayAfter
                              ) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const wedMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Wednesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const wedEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Wednesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const wedMorningWorkoutTypes: string[] = [];
                                const tueEveningWorkoutTypes: string[] = [];
                                const wedEveningWorkoutTypes: string[] = [];
                                if (wedMorning) {
                                  for (const scheduleWorkout of wedMorning?.scheduleWorkouts) {
                                    wedMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (wedEvening) {
                                  for (const scheduleWorkout of wedEvening?.scheduleWorkouts) {
                                    wedEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      wedMorningWorkoutTypes.includes(type) ||
                                      tueEveningWorkoutTypes.includes(type) ||
                                      wedEveningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayAfter = true;
                                } else {
                                  twoDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneHalfDayAfter) {
                                //Monday 1.5 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const wedMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Wednesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueEveningWorkoutTypes: string[] = [];
                                const wedMorningWorkoutTypes: string[] = [];
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                if (wedMorning) {
                                  for (const scheduleWorkout of wedMorning?.scheduleWorkouts) {
                                    wedMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      tueEveningWorkoutTypes.includes(type) ||
                                      wedMorningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayAfter = true;
                                } else {
                                  oneHalfDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneDayAfter) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });


                                const tueEveningWorkoutTypes: string[] = [];
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }


                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      tueEveningWorkoutTypes.includes(type)
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneDayAfter = true;
                                } else {
                                  oneDayAfter = false;
                                }

                              }
                            }

                            if (twoDayBefore && oneHalfDayBefore && oneDayBefore && oneDayAfter && oneDayAfter && oneHalfDayAfter && twoDayAfter) {
                              //now check low intensity rules
                              const lowIntensityWorkoutTypesData =
                                await this.prisma.lowIntensityWorkoutTypes.findUnique(
                                  {
                                    where: {
                                      planId: originalPlan.id,
                                    },
                                  },
                                );

                              const lowIntensityWorkoutTypes =
                                lowIntensityWorkoutTypesData.lowIntensityWorkoutTypes;

                              if (lowIntensityWorkoutTypes) {
                                const lowIntensityRules =
                                  await this.prisma.lowIntensityRules.findMany(
                                    {
                                      where: {
                                        planId: originalPlan.id,
                                      },
                                    },
                                  );

                                let lowIntensityCounter = 0;
                                let restDayCounter = 0
                                for (const lowIntensityRule of lowIntensityRules) {
                                  const { ifClauses, thenClause } =
                                    lowIntensityRule;

                                  const backTrack = ifClauses.length;

                                  if (lowIntensityCounter !== 1 || restDayCounter !== 1) {
                                    if (backTrack === 1) {
                                      //Monday Mor ===> Sunday Even
                                      if (
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.LowIntensityWorkout &&
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.RestDay
                                      ) {
                                        const highIntensityWorkoutType =
                                          ifClauses[0];
                                        const mondayEvening =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week + 1,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Evening,
                                                  day: DAY.Monday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const mondayMorning =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Morning,
                                                  day: DAY.Monday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const mondayEveningWorkoutTypes: string[] =
                                          [];
                                        const mondayMorningWorkoutTypes: string[] =
                                          [];

                                        if (mondayEvening) {
                                          for (const scheduleWorkout of mondayEvening.scheduleWorkouts) {
                                            mondayEveningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (mondayMorning) {
                                          for (const scheduleWorkout of mondayMorning.scheduleWorkouts) {
                                            mondayMorningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        // Check if highIntensityWorkoutType is in sundayEveningWorkoutTypes or sundayMorningWorkoutTypes
                                        const isHighWorkoutTypeInEvening =
                                          mondayEveningWorkoutTypes.includes(
                                            highIntensityWorkoutType,
                                          );
                                        const isHighWorkoutTypeInMorning =
                                          mondayMorningWorkoutTypes.includes(
                                            highIntensityWorkoutType,
                                          );


                                        if (isHighWorkoutTypeInEvening || isHighWorkoutTypeInMorning) {
                                          if (
                                            thenClause ===
                                            THEN_CLAUSE_LOW_INTENSITY.LowIntensityWorkout
                                          ) {
                                            lowIntensityCounter = 1;
                                            counter = counter + 1;
                                            maxNonMissingCount = maxNonMissingCount + 1;

                                            const shuffledLowIntensityWorkoutTypes = this.shuffleArray(lowIntensityWorkoutTypes);

                                            // Select one workout type randomly
                                            const randomLowIntensityWorkoutType = shuffledLowIntensityWorkoutTypes[
                                              Math.floor(Math.random() * shuffledLowIntensityWorkoutTypes.length)
                                            ];

                                            let lowIntensityWorkoutCount = 0;

                                            //check combination rules as well to see if anything comes before or after

                                            const combinationsRules = await this.prisma.combinationRules.findUnique({
                                              where: {
                                                planId: originalPlan.id,
                                              },
                                            })

                                            const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                              where: {
                                                combinationRulesId_workoutType: {
                                                  combinationRulesId: combinationsRules.id,
                                                  workoutType: randomLowIntensityWorkoutType,
                                                }
                                              },
                                              include: {
                                                workoutTypesCombinations: {
                                                  orderBy: {
                                                    priority: 'asc'
                                                  }
                                                }
                                              }
                                            })

                                            const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                            if (lowIntensityWorkoutCount !== 1) {
                                              let randomLowIntensityWorkout;
                                              const workouts = await this.prisma.workout.findMany({
                                                where: {
                                                  type: randomLowIntensityWorkoutType,
                                                  generated: true,
                                                },
                                              });

                                              // Randomize and pick one workout
                                              if (workouts.length > 0) {
                                                randomLowIntensityWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                const selectedWorkout = await this.prisma.workout.findUnique(
                                                  {
                                                    where: {
                                                      id: randomLowIntensityWorkout.id
                                                    },
                                                    include: {
                                                      WorkoutParts: {
                                                        include: {
                                                          comments: true,
                                                          breaks: true,
                                                          partExercises: {
                                                            include: {
                                                              exercise: true,
                                                            },
                                                          },
                                                          generatedExercises: true
                                                        },
                                                      },
                                                    },
                                                  },
                                                );

                                                const existingPlanSchedule =
                                                  await this.prisma.planSchedule.findFirst(
                                                    {
                                                      where: {
                                                        planId:
                                                          userPlan.planId,
                                                      },
                                                      orderBy: {
                                                        week: 'desc',
                                                      },
                                                    },
                                                  );

                                                let planSchedule;
                                                if (existingPlanSchedule) {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week:
                                                            existingPlanSchedule.week +
                                                            1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Tuesday,
                                                        },
                                                      },
                                                    );
                                                } else {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week: 1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Tuesday,
                                                        },
                                                      },
                                                    );
                                                }

                                                let beforeMandatoryWorkoutTypes;
                                                let afterMandatoryWorkoutTypes;
                                                let beforeOptionalWorkoutTypes;
                                                let afterOptionalWorkoutTypes;
                                                for (const workoutTypesCombination of workoutTypesCombinations) {
                                                  if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  }
                                                }

                                                if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                                  for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryWorkout
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryWorkoutType.name,
                                                              type: selectedMandatoryWorkoutType.type,
                                                              generated:
                                                                selectedMandatoryWorkoutType.generated,
                                                              duration:
                                                                selectedMandatoryWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                                  for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalBeforeWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalBeforeWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionalWorkoutType.name,
                                                              type: selectedOptionalWorkoutType.type,
                                                              generated:
                                                                selectedOptionalWorkoutType.generated,
                                                              duration:
                                                                selectedOptionalWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedOptionalWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedOptionalWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedOptionalWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionalWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionalWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionalWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }
                                                //TODO: add durationSeconds lateron
                                                const athleteWorkout =
                                                  await this.prisma.workout.create(
                                                    {
                                                      data: {
                                                        name: selectedWorkout.name,
                                                        type: selectedWorkout.type,
                                                        generated:
                                                          selectedWorkout.generated,
                                                        duration:
                                                          selectedWorkout.duration,
                                                        relatedInjuries:
                                                          selectedWorkout.relatedInjuries,
                                                        injuries:
                                                          selectedWorkout.injuries,
                                                        mediaUrl:
                                                          selectedWorkout.mediaUrl,
                                                        holidayMode:
                                                          selectedWorkout.holidayMode,
                                                        userClone: true,
                                                        workoutSuperSetId:
                                                          selectedWorkout.workoutSuperSetId,
                                                      },
                                                    },
                                                  );

                                                await this.prisma.scheduleWorkout.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      planScheduleId:
                                                        planSchedule.id,
                                                      workoutId:
                                                        athleteWorkout.id,
                                                    },
                                                  },
                                                );

                                                const { WorkoutParts } =
                                                  selectedWorkout;
                                                for (const workoutPart of WorkoutParts) {
                                                  const {
                                                    comments,
                                                    breaks,
                                                    partExercises,
                                                    generatedExercises
                                                  } = workoutPart;
                                                  const athleteWorkoutPart =
                                                    await this.prisma.workoutParts.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          name: workoutPart.name,
                                                          position:
                                                            workoutPart.position,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                  //create comments
                                                  if (comments.length > 0) {
                                                    for (const comment of comments) {
                                                      await this.prisma.comment.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              comment.position,
                                                            comment:
                                                              comment.comment,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }
                                                  //create breaks
                                                  if (breaks.length > 0) {
                                                    for (const brk of breaks) {
                                                      await this.prisma.break.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              brk.position,
                                                            break: brk.break,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }

                                                  if (partExercises && partExercises.length > 0) {
                                                    for (const partExercise of partExercises) {

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              partExercise.benchmark,
                                                            intensity:
                                                              partExercise.intensity,
                                                            position:
                                                              partExercise.position,
                                                            fieldOne:
                                                              partExercise.fieldOne,
                                                            fieldTwo:
                                                              partExercise.fieldTwo,
                                                            reps: partExercise.reps,
                                                            sets: partExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              partExercise.exerciseId,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                  //extract generatedExercises and select an exercise to assign as partExercise
                                                  if (generatedExercises && generatedExercises.length > 0) {
                                                    for (const generatedExercise of generatedExercises) {

                                                      const { muscleGroup, exerciseType } = generatedExercise

                                                      const exercises = await this.prisma.exercise.findMany({
                                                        where: {
                                                          muscleGroup,
                                                          exerciseType
                                                        }
                                                      });

                                                      const randomExercise =
                                                        exercises[
                                                        Math.floor(
                                                          Math.random() *
                                                          exercises.length,
                                                        )
                                                        ];

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              generatedExercise.benchmark,
                                                            intensity:
                                                              generatedExercise.intensity,
                                                            position:
                                                              generatedExercise.position,
                                                            fieldOne:
                                                              generatedExercise.fieldOne,
                                                            fieldTwo:
                                                              generatedExercise.fieldTwo,
                                                            reps: generatedExercise.reps,
                                                            sets: generatedExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              randomExercise.id,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                }

                                                if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                                  for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryAfterWorkout.name,
                                                              type: selectedMandatoryAfterWorkout.type,
                                                              generated:
                                                                selectedMandatoryAfterWorkout.generated,
                                                              duration:
                                                                selectedMandatoryAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                                  for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionAfterWorkout.name,
                                                              type: selectedOptionAfterWorkout.type,
                                                              generated:
                                                                selectedOptionAfterWorkout.generated,
                                                              duration:
                                                                selectedOptionAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedOptionAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedOptionAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedOptionAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          } else if (
                                            thenClause === THEN_CLAUSE_LOW_INTENSITY.RestDay
                                          ) {
                                            //increment restDay counter
                                            restDayCounter = 1
                                          }
                                        }
                                      }
                                    } else if (backTrack === 2) {
                                      //Monday Mor ===> Sat Mor, Sat Even, Sun Mor, Sun Even
                                      if (
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.LowIntensityWorkout &&
                                        ifClauses[0] !==
                                        IF_CLAUSE_LOW_INTENSITY.RestDay &&
                                        ifClauses[1] !==
                                        IF_CLAUSE_LOW_INTENSITY.LowIntensityWorkout &&
                                        ifClauses[1] !==
                                        IF_CLAUSE_LOW_INTENSITY.RestDay
                                      ) {
                                        const highIntensityWorkoutTypeOne =
                                          ifClauses[0];
                                        const highIntensityWorkoutTypeTwo =
                                          ifClauses[1];

                                        const sundayEvening =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Evening,
                                                  day: DAY.Sunday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const sundayMorning =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Morning,
                                                  day: DAY.Sunday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );


                                        const satEvening =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Evening,
                                                  day: DAY.Saturday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const satMorning =
                                          await this.prisma.planSchedule.findUnique(
                                            {
                                              where: {
                                                week_day_gymSession_planId: {
                                                  week: existingPlanSchedule.week,
                                                  planId: userPlan.planId,
                                                  gymSession:
                                                    GYM_SESSION.Morning,
                                                  day: DAY.Saturday,
                                                },
                                              },
                                              include: {
                                                scheduleWorkouts: {
                                                  include: {
                                                    workout: true,
                                                  },
                                                },
                                              },
                                            },
                                          );

                                        const sundayEveningWorkoutTypes: string[] =
                                          [];
                                        const sundayMorningWorkoutTypes: string[] =
                                          [];
                                        const saturdayEveningWorkoutTypes: string[] =
                                          [];
                                        const saturdayMorningWorkoutTypes: string[] =
                                          [];

                                        if (sundayEvening) {
                                          for (const scheduleWorkout of sundayEvening.scheduleWorkouts) {
                                            sundayEveningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (sundayMorning) {
                                          for (const scheduleWorkout of sundayMorning.scheduleWorkouts) {
                                            sundayMorningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (satEvening) {
                                          for (const scheduleWorkout of sundayEvening.scheduleWorkouts) {
                                            saturdayEveningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        if (satMorning) {
                                          for (const scheduleWorkout of sundayMorning.scheduleWorkouts) {
                                            saturdayMorningWorkoutTypes.push(
                                              scheduleWorkout.workout.type,
                                            );
                                          }
                                        }

                                        // Check if highIntensityWorkoutTypeOne is in both Saturday and Sunday
                                        const isHighWorkoutTypeOneInWeek =
                                          (saturdayEveningWorkoutTypes.includes(highIntensityWorkoutTypeOne) ||
                                            saturdayMorningWorkoutTypes.includes(highIntensityWorkoutTypeOne)) &&
                                          (sundayEveningWorkoutTypes.includes(highIntensityWorkoutTypeOne) ||
                                            sundayMorningWorkoutTypes.includes(highIntensityWorkoutTypeOne));

                                        // Check if highIntensityWorkoutTypeTwo is in both Saturday and Sunday
                                        const isHighWorkoutTypeTwoInWeek =
                                          (saturdayEveningWorkoutTypes.includes(highIntensityWorkoutTypeTwo) ||
                                            saturdayMorningWorkoutTypes.includes(highIntensityWorkoutTypeTwo)) &&
                                          (sundayEveningWorkoutTypes.includes(highIntensityWorkoutTypeTwo) ||
                                            sundayMorningWorkoutTypes.includes(highIntensityWorkoutTypeTwo));

                                        // Trigger logic if both high-intensity workouts are scheduled on consecutive days
                                        if (isHighWorkoutTypeOneInWeek && isHighWorkoutTypeTwoInWeek) {
                                          if (
                                            thenClause ===
                                            THEN_CLAUSE_LOW_INTENSITY.LowIntensityWorkout
                                          ) {
                                            counter = counter + 1;
                                            lowIntensityCounter = 1;
                                            maxNonMissingCount = maxNonMissingCount + 1;

                                            const shuffledLowIntensityWorkoutTypes = this.shuffleArray(lowIntensityWorkoutTypes);

                                            // Select one workout type randomly
                                            const randomLowIntensityWorkoutType = shuffledLowIntensityWorkoutTypes[
                                              Math.floor(Math.random() * shuffledLowIntensityWorkoutTypes.length)
                                            ];

                                            let lowIntensityWorkoutCount = 0
                                            //check combination rules as well to see if anything comes before or after

                                            const combinationsRules = await this.prisma.combinationRules.findUnique({
                                              where: {
                                                planId: originalPlan.id,
                                              },
                                            })

                                            const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                              where: {
                                                combinationRulesId_workoutType: {
                                                  combinationRulesId: combinationsRules.id,
                                                  workoutType: randomLowIntensityWorkoutType,
                                                }
                                              },
                                              include: {
                                                workoutTypesCombinations: {
                                                  orderBy: {
                                                    priority: 'asc'
                                                  }
                                                }
                                              }
                                            })

                                            const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                            if (lowIntensityWorkoutCount !== 1) {
                                              let randomLowIntensityWorkout;
                                              const workouts = await this.prisma.workout.findMany({
                                                where: {
                                                  type: randomLowIntensityWorkoutType,
                                                  generated: true,
                                                },
                                              });

                                              // Randomize and pick one workout
                                              if (workouts.length > 0) {
                                                randomLowIntensityWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                const selectedWorkout = await this.prisma.workout.findUnique(
                                                  {
                                                    where: {
                                                      id: randomLowIntensityWorkout.id
                                                    },
                                                    include: {
                                                      WorkoutParts: {
                                                        include: {
                                                          comments: true,
                                                          breaks: true,
                                                          partExercises: {
                                                            include: {
                                                              exercise: true,
                                                            },
                                                          },
                                                          generatedExercises: true
                                                        },
                                                      },
                                                    },
                                                  },
                                                );

                                                const existingPlanSchedule =
                                                  await this.prisma.planSchedule.findFirst(
                                                    {
                                                      where: {
                                                        planId:
                                                          userPlan.planId,
                                                      },
                                                      orderBy: {
                                                        week: 'desc',
                                                      },
                                                    },
                                                  );

                                                let planSchedule;
                                                if (existingPlanSchedule) {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week:
                                                            existingPlanSchedule.week +
                                                            1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Monday,
                                                        },
                                                      },
                                                    );
                                                } else {
                                                  planSchedule =
                                                    await this.prisma.planSchedule.create(
                                                      {
                                                        data: {
                                                          week: 1,
                                                          userClone: true,
                                                          planId:
                                                            userPlan.planId,
                                                          gymSession:
                                                            GYM_SESSION.Morning,
                                                          day: DAY.Monday,
                                                        },
                                                      },
                                                    );
                                                }

                                                let beforeMandatoryWorkoutTypes;
                                                let afterMandatoryWorkoutTypes;
                                                let beforeOptionalWorkoutTypes;
                                                let afterOptionalWorkoutTypes;
                                                for (const workoutTypesCombination of workoutTypesCombinations) {
                                                  if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                    afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                    afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                                  }
                                                }

                                                if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                                  for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryWorkout
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryWorkoutType.name,
                                                              type: selectedMandatoryWorkoutType.type,
                                                              generated:
                                                                selectedMandatoryWorkoutType.generated,
                                                              duration:
                                                                selectedMandatoryWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                                  for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: beforeOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalBeforeWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalBeforeWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionalWorkoutType.name,
                                                              type: selectedOptionalWorkoutType.type,
                                                              generated:
                                                                selectedOptionalWorkoutType.generated,
                                                              duration:
                                                                selectedOptionalWorkoutType.duration,
                                                              relatedInjuries:
                                                                selectedOptionalWorkoutType.relatedInjuries,
                                                              injuries:
                                                                selectedOptionalWorkoutType.injuries,
                                                              mediaUrl:
                                                                selectedOptionalWorkoutType.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionalWorkoutType.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionalWorkoutType.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionalWorkoutType;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }
                                                //TODO: add durationSeconds lateron
                                                const athleteWorkout =
                                                  await this.prisma.workout.create(
                                                    {
                                                      data: {
                                                        name: selectedWorkout.name,
                                                        type: selectedWorkout.type,
                                                        generated:
                                                          selectedWorkout.generated,
                                                        duration:
                                                          selectedWorkout.duration,
                                                        relatedInjuries:
                                                          selectedWorkout.relatedInjuries,
                                                        injuries:
                                                          selectedWorkout.injuries,
                                                        mediaUrl:
                                                          selectedWorkout.mediaUrl,
                                                        holidayMode:
                                                          selectedWorkout.holidayMode,
                                                        userClone: true,
                                                        workoutSuperSetId:
                                                          selectedWorkout.workoutSuperSetId,
                                                      },
                                                    },
                                                  );

                                                await this.prisma.scheduleWorkout.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      planScheduleId:
                                                        planSchedule.id,
                                                      workoutId:
                                                        athleteWorkout.id,
                                                    },
                                                  },
                                                );

                                                const { WorkoutParts } =
                                                  selectedWorkout;
                                                for (const workoutPart of WorkoutParts) {
                                                  const {
                                                    comments,
                                                    breaks,
                                                    partExercises,
                                                    generatedExercises
                                                  } = workoutPart;
                                                  const athleteWorkoutPart =
                                                    await this.prisma.workoutParts.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          name: workoutPart.name,
                                                          position:
                                                            workoutPart.position,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                  //create comments
                                                  if (comments.length > 0) {
                                                    for (const comment of comments) {
                                                      await this.prisma.comment.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              comment.position,
                                                            comment:
                                                              comment.comment,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }
                                                  //create breaks
                                                  if (breaks.length > 0) {
                                                    for (const brk of breaks) {
                                                      await this.prisma.break.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            position:
                                                              brk.position,
                                                            break: brk.break,
                                                            workoutPartsId:
                                                              athleteWorkoutPart.id,
                                                          },
                                                        },
                                                      );
                                                    }
                                                  }

                                                  if (partExercises && partExercises.length > 0) {
                                                    for (const partExercise of partExercises) {

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              partExercise.benchmark,
                                                            intensity:
                                                              partExercise.intensity,
                                                            position:
                                                              partExercise.position,
                                                            fieldOne:
                                                              partExercise.fieldOne,
                                                            fieldTwo:
                                                              partExercise.fieldTwo,
                                                            reps: partExercise.reps,
                                                            sets: partExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              partExercise.exerciseId,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                  //extract generatedExercises and select an exercise to assign as partExercise
                                                  if (generatedExercises && generatedExercises.length > 0) {
                                                    for (const generatedExercise of generatedExercises) {

                                                      const { muscleGroup, exerciseType } = generatedExercise

                                                      const exercises = await this.prisma.exercise.findMany({
                                                        where: {
                                                          muscleGroup,
                                                          exerciseType
                                                        }
                                                      });

                                                      const randomExercise =
                                                        exercises[
                                                        Math.floor(
                                                          Math.random() *
                                                          exercises.length,
                                                        )
                                                        ];

                                                      await this.prisma.partExercises.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            benchmark:
                                                              generatedExercise.benchmark,
                                                            intensity:
                                                              generatedExercise.intensity,
                                                            position:
                                                              generatedExercise.position,
                                                            fieldOne:
                                                              generatedExercise.fieldOne,
                                                            fieldTwo:
                                                              generatedExercise.fieldTwo,
                                                            reps: generatedExercise.reps,
                                                            sets: generatedExercise.sets,
                                                            partId:
                                                              athleteWorkoutPart.id,
                                                            exerciseId:
                                                              randomExercise.id,
                                                          },
                                                        },
                                                      );

                                                    }
                                                  }

                                                }

                                                if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                                  for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterMandatoryWorkoutType,
                                                      },
                                                    });

                                                    let randomMandatoryAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomMandatoryAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedMandatoryAfterWorkout.name,
                                                              type: selectedMandatoryAfterWorkout.type,
                                                              generated:
                                                                selectedMandatoryAfterWorkout.generated,
                                                              duration:
                                                                selectedMandatoryAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedMandatoryAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedMandatoryAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedMandatoryAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedMandatoryAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedMandatoryAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }

                                                if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                                  for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                                    const workouts = await this.prisma.workout.findMany({
                                                      where: {
                                                        type: afterOptionalWorkoutType,
                                                      },
                                                    });

                                                    let randomOptionalAfterWorkout;
                                                    // Randomize and pick one workout
                                                    if (workouts.length > 0) {
                                                      randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                      const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                                        {
                                                          where: {
                                                            id: randomOptionalAfterWorkout.id
                                                          },
                                                          include: {
                                                            WorkoutParts: {
                                                              include: {
                                                                comments: true,
                                                                breaks: true,
                                                                partExercises: {
                                                                  include: {
                                                                    exercise: true,
                                                                  },
                                                                },
                                                                generatedExercises: true
                                                              },
                                                            },
                                                          },
                                                        },
                                                      );
                                                      //TODO: add durationSeconds lateron
                                                      const athleteWorkout =
                                                        await this.prisma.workout.create(
                                                          {
                                                            data: {
                                                              name: selectedOptionAfterWorkout.name,
                                                              type: selectedOptionAfterWorkout.type,
                                                              generated:
                                                                selectedOptionAfterWorkout.generated,
                                                              duration:
                                                                selectedOptionAfterWorkout.duration,
                                                              relatedInjuries:
                                                                selectedOptionAfterWorkout.relatedInjuries,
                                                              injuries:
                                                                selectedOptionAfterWorkout.injuries,
                                                              mediaUrl:
                                                                selectedOptionAfterWorkout.mediaUrl,
                                                              holidayMode:
                                                                selectedOptionAfterWorkout.holidayMode,
                                                              userClone: true,
                                                              workoutSuperSetId:
                                                                selectedOptionAfterWorkout.workoutSuperSetId,
                                                            },
                                                          },
                                                        );

                                                      await this.prisma.scheduleWorkout.create(
                                                        {
                                                          data: {
                                                            userClone: true,
                                                            planScheduleId:
                                                              planSchedule.id,
                                                            workoutId:
                                                              athleteWorkout.id,
                                                          },
                                                        },
                                                      );

                                                      const { WorkoutParts } =
                                                        selectedOptionAfterWorkout;
                                                      for (const workoutPart of WorkoutParts) {
                                                        const {
                                                          comments,
                                                          breaks,
                                                          partExercises,
                                                          generatedExercises
                                                        } = workoutPart;
                                                        const athleteWorkoutPart =
                                                          await this.prisma.workoutParts.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                name: workoutPart.name,
                                                                position:
                                                                  workoutPart.position,
                                                                workoutId:
                                                                  athleteWorkout.id,
                                                              },
                                                            },
                                                          );

                                                        //create comments
                                                        if (comments.length > 0) {
                                                          for (const comment of comments) {
                                                            await this.prisma.comment.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    comment.position,
                                                                  comment:
                                                                    comment.comment,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }
                                                        //create breaks
                                                        if (breaks.length > 0) {
                                                          for (const brk of breaks) {
                                                            await this.prisma.break.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  position:
                                                                    brk.position,
                                                                  break: brk.break,
                                                                  workoutPartsId:
                                                                    athleteWorkoutPart.id,
                                                                },
                                                              },
                                                            );
                                                          }
                                                        }

                                                        if (partExercises && partExercises.length > 0) {
                                                          for (const partExercise of partExercises) {

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    partExercise.benchmark,
                                                                  intensity:
                                                                    partExercise.intensity,
                                                                  position:
                                                                    partExercise.position,
                                                                  fieldOne:
                                                                    partExercise.fieldOne,
                                                                  fieldTwo:
                                                                    partExercise.fieldTwo,
                                                                  reps: partExercise.reps,
                                                                  sets: partExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    partExercise.exerciseId,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                        //extract generatedExercises and select an exercise to assign as partExercise
                                                        if (generatedExercises && generatedExercises.length > 0) {
                                                          for (const generatedExercise of generatedExercises) {

                                                            const { muscleGroup, exerciseType } = generatedExercise

                                                            const exercises = await this.prisma.exercise.findMany({
                                                              where: {
                                                                muscleGroup,
                                                                exerciseType
                                                              }
                                                            });

                                                            const randomExercise =
                                                              exercises[
                                                              Math.floor(
                                                                Math.random() *
                                                                exercises.length,
                                                              )
                                                              ];

                                                            await this.prisma.partExercises.create(
                                                              {
                                                                data: {
                                                                  userClone: true,
                                                                  benchmark:
                                                                    generatedExercise.benchmark,
                                                                  intensity:
                                                                    generatedExercise.intensity,
                                                                  position:
                                                                    generatedExercise.position,
                                                                  fieldOne:
                                                                    generatedExercise.fieldOne,
                                                                  fieldTwo:
                                                                    generatedExercise.fieldTwo,
                                                                  reps: generatedExercise.reps,
                                                                  sets: generatedExercise.sets,
                                                                  partId:
                                                                    athleteWorkoutPart.id,
                                                                  exerciseId:
                                                                    randomExercise.id,
                                                                },
                                                              },
                                                            );

                                                          }
                                                        }

                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          } else if (
                                            thenClause === THEN_CLAUSE_LOW_INTENSITY.RestDay
                                          ) {
                                            //increment restDay counter
                                            restDayCounter = 1
                                          }
                                        }
                                      }
                                    } else if (backTrack === 3) {
                                      const highIntensityWorkoutTypeOne = ifClauses[0];
                                      const highIntensityWorkoutTypeTwo = ifClauses[1];
                                      const highIntensityWorkoutTypeThree = ifClauses[2];

                                      const fridayEvening = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Evening,
                                            day: DAY.Friday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const fridayMorning = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Morning,
                                            day: DAY.Friday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const satEvening = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Evening,
                                            day: DAY.Saturday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const satMorning = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Morning,
                                            day: DAY.Saturday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const sundayEvening = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Evening,
                                            day: DAY.Sunday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const sundayMorning = await this.prisma.planSchedule.findUnique({
                                        where: {
                                          week_day_gymSession_planId: {
                                            week: existingPlanSchedule.week,
                                            planId: userPlan.planId,
                                            gymSession: GYM_SESSION.Morning,
                                            day: DAY.Sunday,
                                          },
                                        },
                                        include: {
                                          scheduleWorkouts: {
                                            include: {
                                              workout: true,
                                            },
                                          },
                                        },
                                      });

                                      const fridayWorkoutTypes: string[] = [];
                                      const saturdayWorkoutTypes: string[] = [];
                                      const sundayWorkoutTypes: string[] = [];

                                      if (fridayEvening) {
                                        for (const scheduleWorkout of fridayEvening.scheduleWorkouts) {
                                          fridayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (fridayMorning) {
                                        for (const scheduleWorkout of fridayMorning.scheduleWorkouts) {
                                          fridayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (satEvening) {
                                        for (const scheduleWorkout of satEvening.scheduleWorkouts) {
                                          saturdayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (satMorning) {
                                        for (const scheduleWorkout of satMorning.scheduleWorkouts) {
                                          saturdayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (sundayEvening) {
                                        for (const scheduleWorkout of sundayEvening.scheduleWorkouts) {
                                          sundayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      if (sundayMorning) {
                                        for (const scheduleWorkout of sundayMorning.scheduleWorkouts) {
                                          sundayWorkoutTypes.push(scheduleWorkout.workout.type);
                                        }
                                      }

                                      const allWorkoutTypes = [
                                        ...fridayWorkoutTypes,
                                        ...saturdayWorkoutTypes,
                                        ...sundayWorkoutTypes,
                                      ];

                                      // Check if all high-intensity workout types are present across Friday, Saturday, and Sunday
                                      const hasHighIntensityWorkouts =
                                        allWorkoutTypes.includes(highIntensityWorkoutTypeOne) &&
                                        allWorkoutTypes.includes(highIntensityWorkoutTypeTwo) &&
                                        allWorkoutTypes.includes(highIntensityWorkoutTypeThree);

                                      if (hasHighIntensityWorkouts) {
                                        if (
                                          thenClause ===
                                          THEN_CLAUSE_LOW_INTENSITY.LowIntensityWorkout
                                        ) {
                                          counter = counter + 1;
                                          lowIntensityCounter = 1;
                                          maxNonMissingCount = maxNonMissingCount + 1;

                                          const shuffledLowIntensityWorkoutTypes = this.shuffleArray(lowIntensityWorkoutTypes);

                                          let lowIntensityWorkoutCount = 0
                                          // Select one workout type randomly
                                          const randomLowIntensityWorkoutType = shuffledLowIntensityWorkoutTypes[
                                            Math.floor(Math.random() * shuffledLowIntensityWorkoutTypes.length)
                                          ];
                                          //check combination rules as well to see if anything comes before or after

                                          const combinationsRules = await this.prisma.combinationRules.findUnique({
                                            where: {
                                              planId: originalPlan.id,
                                            },
                                          })

                                          const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                            where: {
                                              combinationRulesId_workoutType: {
                                                combinationRulesId: combinationsRules.id,
                                                workoutType: randomLowIntensityWorkoutType,
                                              }
                                            },
                                            include: {
                                              workoutTypesCombinations: {
                                                orderBy: {
                                                  priority: 'asc'
                                                }
                                              }
                                            }
                                          })

                                          const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                          if (lowIntensityWorkoutCount !== 1) {
                                            let randomLowIntensityWorkout;
                                            const workouts = await this.prisma.workout.findMany({
                                              where: {
                                                type: randomLowIntensityWorkoutType,
                                                generated: true,
                                              },
                                            });

                                            // Randomize and pick one workout
                                            if (workouts.length > 0) {
                                              randomLowIntensityWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                              const selectedWorkout = await this.prisma.workout.findUnique(
                                                {
                                                  where: {
                                                    id: randomLowIntensityWorkout.id
                                                  },
                                                  include: {
                                                    WorkoutParts: {
                                                      include: {
                                                        comments: true,
                                                        breaks: true,
                                                        partExercises: {
                                                          include: {
                                                            exercise: true,
                                                          },
                                                        },
                                                        generatedExercises: true
                                                      },
                                                    },
                                                  },
                                                },
                                              );

                                              const existingPlanSchedule =
                                                await this.prisma.planSchedule.findFirst(
                                                  {
                                                    where: {
                                                      planId:
                                                        userPlan.planId,
                                                    },
                                                    orderBy: {
                                                      week: 'desc',
                                                    },
                                                  },
                                                );

                                              let planSchedule;
                                              if (existingPlanSchedule) {
                                                planSchedule =
                                                  await this.prisma.planSchedule.create(
                                                    {
                                                      data: {
                                                        week:
                                                          existingPlanSchedule.week +
                                                          1,
                                                        userClone: true,
                                                        planId:
                                                          userPlan.planId,
                                                        gymSession:
                                                          GYM_SESSION.Morning,
                                                        day: DAY.Monday,
                                                      },
                                                    },
                                                  );
                                              } else {
                                                planSchedule =
                                                  await this.prisma.planSchedule.create(
                                                    {
                                                      data: {
                                                        week: 1,
                                                        userClone: true,
                                                        planId:
                                                          userPlan.planId,
                                                        gymSession:
                                                          GYM_SESSION.Morning,
                                                        day: DAY.Monday,
                                                      },
                                                    },
                                                  );
                                              }

                                              let beforeMandatoryWorkoutTypes;
                                              let afterMandatoryWorkoutTypes;
                                              let beforeOptionalWorkoutTypes;
                                              let afterOptionalWorkoutTypes;
                                              for (const workoutTypesCombination of workoutTypesCombinations) {
                                                if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                  beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                  beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                                } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                                  afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                                } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                                  afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                                }
                                              }

                                              if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                                for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: beforeMandatoryWorkoutType,
                                                    },
                                                  });

                                                  let randomMandatoryWorkout
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomMandatoryWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedMandatoryWorkoutType.name,
                                                            type: selectedMandatoryWorkoutType.type,
                                                            generated:
                                                              selectedMandatoryWorkoutType.generated,
                                                            duration:
                                                              selectedMandatoryWorkoutType.duration,
                                                            relatedInjuries:
                                                              selectedMandatoryWorkoutType.relatedInjuries,
                                                            injuries:
                                                              selectedMandatoryWorkoutType.injuries,
                                                            mediaUrl:
                                                              selectedMandatoryWorkoutType.mediaUrl,
                                                            holidayMode:
                                                              selectedMandatoryWorkoutType.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedMandatoryWorkoutType.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedMandatoryWorkoutType;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                    }
                                                  }
                                                }
                                              }

                                              if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                                for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: beforeOptionalWorkoutType,
                                                    },
                                                  });

                                                  let randomOptionalBeforeWorkout;
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomOptionalBeforeWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedOptionalWorkoutType.name,
                                                            type: selectedOptionalWorkoutType.type,
                                                            generated:
                                                              selectedOptionalWorkoutType.generated,
                                                            duration:
                                                              selectedOptionalWorkoutType.duration,
                                                            relatedInjuries:
                                                              selectedOptionalWorkoutType.relatedInjuries,
                                                            injuries:
                                                              selectedOptionalWorkoutType.injuries,
                                                            mediaUrl:
                                                              selectedOptionalWorkoutType.mediaUrl,
                                                            holidayMode:
                                                              selectedOptionalWorkoutType.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedOptionalWorkoutType.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedOptionalWorkoutType;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                    }
                                                  }
                                                }
                                              }
                                              //TODO: add durationSeconds lateron
                                              const athleteWorkout =
                                                await this.prisma.workout.create(
                                                  {
                                                    data: {
                                                      name: selectedWorkout.name,
                                                      type: selectedWorkout.type,
                                                      generated:
                                                        selectedWorkout.generated,
                                                      duration:
                                                        selectedWorkout.duration,
                                                      relatedInjuries:
                                                        selectedWorkout.relatedInjuries,
                                                      injuries:
                                                        selectedWorkout.injuries,
                                                      mediaUrl:
                                                        selectedWorkout.mediaUrl,
                                                      holidayMode:
                                                        selectedWorkout.holidayMode,
                                                      userClone: true,
                                                      workoutSuperSetId:
                                                        selectedWorkout.workoutSuperSetId,
                                                    },
                                                  },
                                                );

                                              await this.prisma.scheduleWorkout.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    planScheduleId:
                                                      planSchedule.id,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                              const { WorkoutParts } =
                                                selectedWorkout;
                                              for (const workoutPart of WorkoutParts) {
                                                const {
                                                  comments,
                                                  breaks,
                                                  partExercises,
                                                  generatedExercises
                                                } = workoutPart;
                                                const athleteWorkoutPart =
                                                  await this.prisma.workoutParts.create(
                                                    {
                                                      data: {
                                                        userClone: true,
                                                        name: workoutPart.name,
                                                        position:
                                                          workoutPart.position,
                                                        workoutId:
                                                          athleteWorkout.id,
                                                      },
                                                    },
                                                  );

                                                //create comments
                                                if (comments.length > 0) {
                                                  for (const comment of comments) {
                                                    await this.prisma.comment.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          position:
                                                            comment.position,
                                                          comment:
                                                            comment.comment,
                                                          workoutPartsId:
                                                            athleteWorkoutPart.id,
                                                        },
                                                      },
                                                    );
                                                  }
                                                }
                                                //create breaks
                                                if (breaks.length > 0) {
                                                  for (const brk of breaks) {
                                                    await this.prisma.break.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          position:
                                                            brk.position,
                                                          break: brk.break,
                                                          workoutPartsId:
                                                            athleteWorkoutPart.id,
                                                        },
                                                      },
                                                    );
                                                  }
                                                }

                                                if (partExercises && partExercises.length > 0) {
                                                  for (const partExercise of partExercises) {

                                                    await this.prisma.partExercises.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          benchmark:
                                                            partExercise.benchmark,
                                                          intensity:
                                                            partExercise.intensity,
                                                          position:
                                                            partExercise.position,
                                                          fieldOne:
                                                            partExercise.fieldOne,
                                                          fieldTwo:
                                                            partExercise.fieldTwo,
                                                          reps: partExercise.reps,
                                                          sets: partExercise.sets,
                                                          partId:
                                                            athleteWorkoutPart.id,
                                                          exerciseId:
                                                            partExercise.exerciseId,
                                                        },
                                                      },
                                                    );

                                                  }
                                                }

                                                //extract generatedExercises and select an exercise to assign as partExercise
                                                if (generatedExercises && generatedExercises.length > 0) {
                                                  for (const generatedExercise of generatedExercises) {

                                                    const { muscleGroup, exerciseType } = generatedExercise

                                                    const exercises = await this.prisma.exercise.findMany({
                                                      where: {
                                                        muscleGroup,
                                                        exerciseType
                                                      }
                                                    });

                                                    const randomExercise =
                                                      exercises[
                                                      Math.floor(
                                                        Math.random() *
                                                        exercises.length,
                                                      )
                                                      ];

                                                    await this.prisma.partExercises.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          benchmark:
                                                            generatedExercise.benchmark,
                                                          intensity:
                                                            generatedExercise.intensity,
                                                          position:
                                                            generatedExercise.position,
                                                          fieldOne:
                                                            generatedExercise.fieldOne,
                                                          fieldTwo:
                                                            generatedExercise.fieldTwo,
                                                          reps: generatedExercise.reps,
                                                          sets: generatedExercise.sets,
                                                          partId:
                                                            athleteWorkoutPart.id,
                                                          exerciseId:
                                                            randomExercise.id,
                                                        },
                                                      },
                                                    );

                                                  }
                                                }

                                              }

                                              if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                                for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: afterMandatoryWorkoutType,
                                                    },
                                                  });

                                                  let randomMandatoryAfterWorkout;
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomMandatoryAfterWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedMandatoryAfterWorkout.name,
                                                            type: selectedMandatoryAfterWorkout.type,
                                                            generated:
                                                              selectedMandatoryAfterWorkout.generated,
                                                            duration:
                                                              selectedMandatoryAfterWorkout.duration,
                                                            relatedInjuries:
                                                              selectedMandatoryAfterWorkout.relatedInjuries,
                                                            injuries:
                                                              selectedMandatoryAfterWorkout.injuries,
                                                            mediaUrl:
                                                              selectedMandatoryAfterWorkout.mediaUrl,
                                                            holidayMode:
                                                              selectedMandatoryAfterWorkout.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedMandatoryAfterWorkout;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                    }
                                                  }
                                                }
                                              }

                                              if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                                for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                                  const workouts = await this.prisma.workout.findMany({
                                                    where: {
                                                      type: afterOptionalWorkoutType,
                                                    },
                                                  });

                                                  let randomOptionalAfterWorkout;
                                                  // Randomize and pick one workout
                                                  if (workouts.length > 0) {
                                                    randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                                    const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                                      {
                                                        where: {
                                                          id: randomOptionalAfterWorkout.id
                                                        },
                                                        include: {
                                                          WorkoutParts: {
                                                            include: {
                                                              comments: true,
                                                              breaks: true,
                                                              partExercises: {
                                                                include: {
                                                                  exercise: true,
                                                                },
                                                              },
                                                              generatedExercises: true
                                                            },
                                                          },
                                                        },
                                                      },
                                                    );
                                                    //TODO: add durationSeconds lateron
                                                    const athleteWorkout =
                                                      await this.prisma.workout.create(
                                                        {
                                                          data: {
                                                            name: selectedOptionAfterWorkout.name,
                                                            type: selectedOptionAfterWorkout.type,
                                                            generated:
                                                              selectedOptionAfterWorkout.generated,
                                                            duration:
                                                              selectedOptionAfterWorkout.duration,
                                                            relatedInjuries:
                                                              selectedOptionAfterWorkout.relatedInjuries,
                                                            injuries:
                                                              selectedOptionAfterWorkout.injuries,
                                                            mediaUrl:
                                                              selectedOptionAfterWorkout.mediaUrl,
                                                            holidayMode:
                                                              selectedOptionAfterWorkout.holidayMode,
                                                            userClone: true,
                                                            workoutSuperSetId:
                                                              selectedOptionAfterWorkout.workoutSuperSetId,
                                                          },
                                                        },
                                                      );

                                                    await this.prisma.scheduleWorkout.create(
                                                      {
                                                        data: {
                                                          userClone: true,
                                                          planScheduleId:
                                                            planSchedule.id,
                                                          workoutId:
                                                            athleteWorkout.id,
                                                        },
                                                      },
                                                    );

                                                    const { WorkoutParts } =
                                                      selectedOptionAfterWorkout;
                                                    for (const workoutPart of WorkoutParts) {
                                                      const {
                                                        comments,
                                                        breaks,
                                                        partExercises,
                                                        generatedExercises
                                                      } = workoutPart;
                                                      const athleteWorkoutPart =
                                                        await this.prisma.workoutParts.create(
                                                          {
                                                            data: {
                                                              userClone: true,
                                                              name: workoutPart.name,
                                                              position:
                                                                workoutPart.position,
                                                              workoutId:
                                                                athleteWorkout.id,
                                                            },
                                                          },
                                                        );

                                                      //create comments
                                                      if (comments.length > 0) {
                                                        for (const comment of comments) {
                                                          await this.prisma.comment.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  comment.position,
                                                                comment:
                                                                  comment.comment,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }
                                                      //create breaks
                                                      if (breaks.length > 0) {
                                                        for (const brk of breaks) {
                                                          await this.prisma.break.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                position:
                                                                  brk.position,
                                                                break: brk.break,
                                                                workoutPartsId:
                                                                  athleteWorkoutPart.id,
                                                              },
                                                            },
                                                          );
                                                        }
                                                      }

                                                      if (partExercises && partExercises.length > 0) {
                                                        for (const partExercise of partExercises) {

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  partExercise.benchmark,
                                                                intensity:
                                                                  partExercise.intensity,
                                                                position:
                                                                  partExercise.position,
                                                                fieldOne:
                                                                  partExercise.fieldOne,
                                                                fieldTwo:
                                                                  partExercise.fieldTwo,
                                                                reps: partExercise.reps,
                                                                sets: partExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  partExercise.exerciseId,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }

                                                      //extract generatedExercises and select an exercise to assign as partExercise
                                                      if (generatedExercises && generatedExercises.length > 0) {
                                                        for (const generatedExercise of generatedExercises) {

                                                          const { muscleGroup, exerciseType } = generatedExercise

                                                          const exercises = await this.prisma.exercise.findMany({
                                                            where: {
                                                              muscleGroup,
                                                              exerciseType
                                                            }
                                                          });

                                                          const randomExercise =
                                                            exercises[
                                                            Math.floor(
                                                              Math.random() *
                                                              exercises.length,
                                                            )
                                                            ];

                                                          await this.prisma.partExercises.create(
                                                            {
                                                              data: {
                                                                userClone: true,
                                                                benchmark:
                                                                  generatedExercise.benchmark,
                                                                intensity:
                                                                  generatedExercise.intensity,
                                                                position:
                                                                  generatedExercise.position,
                                                                fieldOne:
                                                                  generatedExercise.fieldOne,
                                                                fieldTwo:
                                                                  generatedExercise.fieldTwo,
                                                                reps: generatedExercise.reps,
                                                                sets: generatedExercise.sets,
                                                                partId:
                                                                  athleteWorkoutPart.id,
                                                                exerciseId:
                                                                  randomExercise.id,
                                                              },
                                                            },
                                                          );

                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } else if (
                                          thenClause === THEN_CLAUSE_LOW_INTENSITY.RestDay
                                        ) {
                                          //increment restDay counter
                                          restDayCounter = 1
                                        }
                                      }
                                    }
                                  }
                                }
                                if (lowIntensityCounter === 0 && restDayCounter === 0) {
                                  workoutOccurrence = workoutOccurrence + 1;
                                  counter = counter + 1;
                                  maxNonMissingCount = maxNonMissingCount + 1;

                                  //check combination rules as well to see if anything comes before or after

                                  const combinationsRules = await this.prisma.combinationRules.findUnique({
                                    where: {
                                      planId: originalPlan.id,
                                    },
                                  })

                                  const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                    where: {
                                      combinationRulesId_workoutType: {
                                        combinationRulesId: combinationsRules.id,
                                        workoutType: workoutType,
                                      }
                                    },
                                    include: {
                                      workoutTypesCombinations: {
                                        orderBy: {
                                          priority: 'asc'
                                        }
                                      }
                                    }
                                  })

                                  const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                  let randomWorkoutType;
                                  const workouts = await this.prisma.workout.findMany({
                                    where: {
                                      type: workoutType,
                                      generated: true,
                                    },
                                  });

                                  // Randomize and pick one workout
                                  if (workouts.length > 0) {
                                    randomWorkoutType = workouts[Math.floor(Math.random() * workouts.length)];

                                    const selectedWorkout = await this.prisma.workout.findUnique(
                                      {
                                        where: {
                                          id: randomWorkoutType.id
                                        },
                                        include: {
                                          WorkoutParts: {
                                            include: {
                                              comments: true,
                                              breaks: true,
                                              partExercises: {
                                                include: {
                                                  exercise: true,
                                                },
                                              },
                                              generatedExercises: true
                                            },
                                          },
                                        },
                                      },
                                    );

                                    const existingPlanSchedule =
                                      await this.prisma.planSchedule.findFirst(
                                        {
                                          where: {
                                            planId:
                                              userPlan.planId,
                                          },
                                          orderBy: {
                                            week: 'desc',
                                          },
                                        },
                                      );

                                    let planSchedule;
                                    if (existingPlanSchedule) {
                                      planSchedule =
                                        await this.prisma.planSchedule.create(
                                          {
                                            data: {
                                              week:
                                                existingPlanSchedule.week +
                                                1,
                                              userClone: true,
                                              planId:
                                                userPlan.planId,
                                              gymSession:
                                                GYM_SESSION.Morning,
                                              day: DAY.Monday,
                                            },
                                          },
                                        );
                                    } else {
                                      planSchedule =
                                        await this.prisma.planSchedule.create(
                                          {
                                            data: {
                                              week: 1,
                                              userClone: true,
                                              planId:
                                                userPlan.planId,
                                              gymSession:
                                                GYM_SESSION.Morning,
                                              day: DAY.Monday,
                                            },
                                          },
                                        );
                                    }

                                    let beforeMandatoryWorkoutTypes;
                                    let afterMandatoryWorkoutTypes;
                                    let beforeOptionalWorkoutTypes;
                                    let afterOptionalWorkoutTypes;
                                    for (const workoutTypesCombination of workoutTypesCombinations) {
                                      if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                        beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                      } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                        beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                      } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                        afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                      } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                        afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                      }
                                    }

                                    if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                      for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: beforeMandatoryWorkoutType,
                                          },
                                        });

                                        let randomMandatoryWorkout
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomMandatoryWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedMandatoryWorkoutType.name,
                                                  type: selectedMandatoryWorkoutType.type,
                                                  generated:
                                                    selectedMandatoryWorkoutType.generated,
                                                  duration:
                                                    selectedMandatoryWorkoutType.duration,
                                                  relatedInjuries:
                                                    selectedMandatoryWorkoutType.relatedInjuries,
                                                  injuries:
                                                    selectedMandatoryWorkoutType.injuries,
                                                  mediaUrl:
                                                    selectedMandatoryWorkoutType.mediaUrl,
                                                  holidayMode:
                                                    selectedMandatoryWorkoutType.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedMandatoryWorkoutType.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedMandatoryWorkoutType;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                          }
                                        }
                                      }
                                    }

                                    if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                      for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: beforeOptionalWorkoutType,
                                          },
                                        });

                                        let randomOptionalBeforeWorkout;
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomOptionalBeforeWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedOptionalWorkoutType.name,
                                                  type: selectedOptionalWorkoutType.type,
                                                  generated:
                                                    selectedOptionalWorkoutType.generated,
                                                  duration:
                                                    selectedOptionalWorkoutType.duration,
                                                  relatedInjuries:
                                                    selectedOptionalWorkoutType.relatedInjuries,
                                                  injuries:
                                                    selectedOptionalWorkoutType.injuries,
                                                  mediaUrl:
                                                    selectedOptionalWorkoutType.mediaUrl,
                                                  holidayMode:
                                                    selectedOptionalWorkoutType.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedOptionalWorkoutType.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedOptionalWorkoutType;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                          }
                                        }
                                      }
                                    }
                                    //TODO: add durationSeconds lateron
                                    const athleteWorkout =
                                      await this.prisma.workout.create(
                                        {
                                          data: {
                                            name: selectedWorkout.name,
                                            type: selectedWorkout.type,
                                            generated:
                                              selectedWorkout.generated,
                                            duration:
                                              selectedWorkout.duration,
                                            relatedInjuries:
                                              selectedWorkout.relatedInjuries,
                                            injuries:
                                              selectedWorkout.injuries,
                                            mediaUrl:
                                              selectedWorkout.mediaUrl,
                                            holidayMode:
                                              selectedWorkout.holidayMode,
                                            userClone: true,
                                            workoutSuperSetId:
                                              selectedWorkout.workoutSuperSetId,
                                          },
                                        },
                                      );

                                    await this.prisma.scheduleWorkout.create(
                                      {
                                        data: {
                                          userClone: true,
                                          planScheduleId:
                                            planSchedule.id,
                                          workoutId:
                                            athleteWorkout.id,
                                        },
                                      },
                                    );

                                    const { WorkoutParts } =
                                      selectedWorkout;
                                    for (const workoutPart of WorkoutParts) {
                                      const {
                                        comments,
                                        breaks,
                                        partExercises,
                                        generatedExercises
                                      } = workoutPart;
                                      const athleteWorkoutPart =
                                        await this.prisma.workoutParts.create(
                                          {
                                            data: {
                                              userClone: true,
                                              name: workoutPart.name,
                                              position:
                                                workoutPart.position,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                      //create comments
                                      if (comments.length > 0) {
                                        for (const comment of comments) {
                                          await this.prisma.comment.create(
                                            {
                                              data: {
                                                userClone: true,
                                                position:
                                                  comment.position,
                                                comment:
                                                  comment.comment,
                                                workoutPartsId:
                                                  athleteWorkoutPart.id,
                                              },
                                            },
                                          );
                                        }
                                      }
                                      //create breaks
                                      if (breaks.length > 0) {
                                        for (const brk of breaks) {
                                          await this.prisma.break.create(
                                            {
                                              data: {
                                                userClone: true,
                                                position:
                                                  brk.position,
                                                break: brk.break,
                                                workoutPartsId:
                                                  athleteWorkoutPart.id,
                                              },
                                            },
                                          );
                                        }
                                      }

                                      if (partExercises && partExercises.length > 0) {
                                        for (const partExercise of partExercises) {

                                          await this.prisma.partExercises.create(
                                            {
                                              data: {
                                                userClone: true,
                                                benchmark:
                                                  partExercise.benchmark,
                                                intensity:
                                                  partExercise.intensity,
                                                position:
                                                  partExercise.position,
                                                fieldOne:
                                                  partExercise.fieldOne,
                                                fieldTwo:
                                                  partExercise.fieldTwo,
                                                reps: partExercise.reps,
                                                sets: partExercise.sets,
                                                partId:
                                                  athleteWorkoutPart.id,
                                                exerciseId:
                                                  partExercise.exerciseId,
                                              },
                                            },
                                          );

                                        }
                                      }

                                      //extract generatedExercises and select an exercise to assign as partExercise
                                      if (generatedExercises && generatedExercises.length > 0) {
                                        for (const generatedExercise of generatedExercises) {

                                          const { muscleGroup, exerciseType } = generatedExercise

                                          const exercises = await this.prisma.exercise.findMany({
                                            where: {
                                              muscleGroup,
                                              exerciseType
                                            }
                                          });

                                          const randomExercise =
                                            exercises[
                                            Math.floor(
                                              Math.random() *
                                              exercises.length,
                                            )
                                            ];

                                          await this.prisma.partExercises.create(
                                            {
                                              data: {
                                                userClone: true,
                                                benchmark:
                                                  generatedExercise.benchmark,
                                                intensity:
                                                  generatedExercise.intensity,
                                                position:
                                                  generatedExercise.position,
                                                fieldOne:
                                                  generatedExercise.fieldOne,
                                                fieldTwo:
                                                  generatedExercise.fieldTwo,
                                                reps: generatedExercise.reps,
                                                sets: generatedExercise.sets,
                                                partId:
                                                  athleteWorkoutPart.id,
                                                exerciseId:
                                                  randomExercise.id,
                                              },
                                            },
                                          );

                                        }
                                      }

                                    }

                                    if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                      for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: afterMandatoryWorkoutType,
                                          },
                                        });

                                        let randomMandatoryAfterWorkout;
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomMandatoryAfterWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedMandatoryAfterWorkout.name,
                                                  type: selectedMandatoryAfterWorkout.type,
                                                  generated:
                                                    selectedMandatoryAfterWorkout.generated,
                                                  duration:
                                                    selectedMandatoryAfterWorkout.duration,
                                                  relatedInjuries:
                                                    selectedMandatoryAfterWorkout.relatedInjuries,
                                                  injuries:
                                                    selectedMandatoryAfterWorkout.injuries,
                                                  mediaUrl:
                                                    selectedMandatoryAfterWorkout.mediaUrl,
                                                  holidayMode:
                                                    selectedMandatoryAfterWorkout.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedMandatoryAfterWorkout.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedMandatoryAfterWorkout;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                          }
                                        }
                                      }
                                    }

                                    if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                      for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                        const workouts = await this.prisma.workout.findMany({
                                          where: {
                                            type: afterOptionalWorkoutType,
                                          },
                                        });

                                        let randomOptionalAfterWorkout;
                                        // Randomize and pick one workout
                                        if (workouts.length > 0) {
                                          randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                          const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                            {
                                              where: {
                                                id: randomOptionalAfterWorkout.id
                                              },
                                              include: {
                                                WorkoutParts: {
                                                  include: {
                                                    comments: true,
                                                    breaks: true,
                                                    partExercises: {
                                                      include: {
                                                        exercise: true,
                                                      },
                                                    },
                                                    generatedExercises: true
                                                  },
                                                },
                                              },
                                            },
                                          );
                                          //TODO: add durationSeconds lateron
                                          const athleteWorkout =
                                            await this.prisma.workout.create(
                                              {
                                                data: {
                                                  name: selectedOptionAfterWorkout.name,
                                                  type: selectedOptionAfterWorkout.type,
                                                  generated:
                                                    selectedOptionAfterWorkout.generated,
                                                  duration:
                                                    selectedOptionAfterWorkout.duration,
                                                  relatedInjuries:
                                                    selectedOptionAfterWorkout.relatedInjuries,
                                                  injuries:
                                                    selectedOptionAfterWorkout.injuries,
                                                  mediaUrl:
                                                    selectedOptionAfterWorkout.mediaUrl,
                                                  holidayMode:
                                                    selectedOptionAfterWorkout.holidayMode,
                                                  userClone: true,
                                                  workoutSuperSetId:
                                                    selectedOptionAfterWorkout.workoutSuperSetId,
                                                },
                                              },
                                            );

                                          await this.prisma.scheduleWorkout.create(
                                            {
                                              data: {
                                                userClone: true,
                                                planScheduleId:
                                                  planSchedule.id,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                          const { WorkoutParts } =
                                            selectedOptionAfterWorkout;
                                          for (const workoutPart of WorkoutParts) {
                                            const {
                                              comments,
                                              breaks,
                                              partExercises,
                                              generatedExercises
                                            } = workoutPart;
                                            const athleteWorkoutPart =
                                              await this.prisma.workoutParts.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    name: workoutPart.name,
                                                    position:
                                                      workoutPart.position,
                                                    workoutId:
                                                      athleteWorkout.id,
                                                  },
                                                },
                                              );

                                            //create comments
                                            if (comments.length > 0) {
                                              for (const comment of comments) {
                                                await this.prisma.comment.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        comment.position,
                                                      comment:
                                                        comment.comment,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }
                                            //create breaks
                                            if (breaks.length > 0) {
                                              for (const brk of breaks) {
                                                await this.prisma.break.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      position:
                                                        brk.position,
                                                      break: brk.break,
                                                      workoutPartsId:
                                                        athleteWorkoutPart.id,
                                                    },
                                                  },
                                                );
                                              }
                                            }

                                            if (partExercises && partExercises.length > 0) {
                                              for (const partExercise of partExercises) {

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        partExercise.benchmark,
                                                      intensity:
                                                        partExercise.intensity,
                                                      position:
                                                        partExercise.position,
                                                      fieldOne:
                                                        partExercise.fieldOne,
                                                      fieldTwo:
                                                        partExercise.fieldTwo,
                                                      reps: partExercise.reps,
                                                      sets: partExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        partExercise.exerciseId,
                                                    },
                                                  },
                                                );

                                              }
                                            }

                                            //extract generatedExercises and select an exercise to assign as partExercise
                                            if (generatedExercises && generatedExercises.length > 0) {
                                              for (const generatedExercise of generatedExercises) {

                                                const { muscleGroup, exerciseType } = generatedExercise

                                                const exercises = await this.prisma.exercise.findMany({
                                                  where: {
                                                    muscleGroup,
                                                    exerciseType
                                                  }
                                                });

                                                const randomExercise =
                                                  exercises[
                                                  Math.floor(
                                                    Math.random() *
                                                    exercises.length,
                                                  )
                                                  ];

                                                await this.prisma.partExercises.create(
                                                  {
                                                    data: {
                                                      userClone: true,
                                                      benchmark:
                                                        generatedExercise.benchmark,
                                                      intensity:
                                                        generatedExercise.intensity,
                                                      position:
                                                        generatedExercise.position,
                                                      fieldOne:
                                                        generatedExercise.fieldOne,
                                                      fieldTwo:
                                                        generatedExercise.fieldTwo,
                                                      reps: generatedExercise.reps,
                                                      sets: generatedExercise.sets,
                                                      partId:
                                                        athleteWorkoutPart.id,
                                                      exerciseId:
                                                        randomExercise.id,
                                                    },
                                                  },
                                                );

                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              } else {
                                workoutOccurrence = workoutOccurrence + 1;
                                counter = counter + 1;
                                maxNonMissingCount = maxNonMissingCount + 1;

                                //check combination rules as well to see if anything comes before or after

                                const combinationsRules = await this.prisma.combinationRules.findUnique({
                                  where: {
                                    planId: originalPlan.id,
                                  },
                                })

                                const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                  where: {
                                    combinationRulesId_workoutType: {
                                      combinationRulesId: combinationsRules.id,
                                      workoutType: workoutType,
                                    }
                                  },
                                  include: {
                                    workoutTypesCombinations: {
                                      orderBy: {
                                        priority: 'asc'
                                      }
                                    }
                                  }
                                })

                                const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                                let randomWorkoutType;
                                const workouts = await this.prisma.workout.findMany({
                                  where: {
                                    type: workoutType,
                                    generated: true,
                                  },
                                });

                                // Randomize and pick one workout
                                if (workouts.length > 0) {
                                  randomWorkoutType = workouts[Math.floor(Math.random() * workouts.length)];

                                  const selectedWorkout = await this.prisma.workout.findUnique(
                                    {
                                      where: {
                                        id: randomWorkoutType.id
                                      },
                                      include: {
                                        WorkoutParts: {
                                          include: {
                                            comments: true,
                                            breaks: true,
                                            partExercises: {
                                              include: {
                                                exercise: true,
                                              },
                                            },
                                            generatedExercises: true
                                          },
                                        },
                                      },
                                    },
                                  );

                                  const existingPlanSchedule =
                                    await this.prisma.planSchedule.findFirst(
                                      {
                                        where: {
                                          planId:
                                            userPlan.planId,
                                        },
                                        orderBy: {
                                          week: 'desc',
                                        },
                                      },
                                    );

                                  let planSchedule;
                                  if (existingPlanSchedule) {
                                    planSchedule =
                                      await this.prisma.planSchedule.create(
                                        {
                                          data: {
                                            week:
                                              existingPlanSchedule.week +
                                              1,
                                            userClone: true,
                                            planId:
                                              userPlan.planId,
                                            gymSession:
                                              GYM_SESSION.Morning,
                                            day: DAY.Monday,
                                          },
                                        },
                                      );
                                  } else {
                                    planSchedule =
                                      await this.prisma.planSchedule.create(
                                        {
                                          data: {
                                            week: 1,
                                            userClone: true,
                                            planId:
                                              userPlan.planId,
                                            gymSession:
                                              GYM_SESSION.Morning,
                                            day: DAY.Monday,
                                          },
                                        },
                                      );
                                  }

                                  let beforeMandatoryWorkoutTypes;
                                  let afterMandatoryWorkoutTypes;
                                  let beforeOptionalWorkoutTypes;
                                  let afterOptionalWorkoutTypes;
                                  for (const workoutTypesCombination of workoutTypesCombinations) {
                                    if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                      beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                    } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                      beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                    } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                      afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                    } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                      afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                    }
                                  }

                                  if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                    for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: beforeMandatoryWorkoutType,
                                        },
                                      });

                                      let randomMandatoryWorkout
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomMandatoryWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedMandatoryWorkoutType.name,
                                                type: selectedMandatoryWorkoutType.type,
                                                generated:
                                                  selectedMandatoryWorkoutType.generated,
                                                duration:
                                                  selectedMandatoryWorkoutType.duration,
                                                relatedInjuries:
                                                  selectedMandatoryWorkoutType.relatedInjuries,
                                                injuries:
                                                  selectedMandatoryWorkoutType.injuries,
                                                mediaUrl:
                                                  selectedMandatoryWorkoutType.mediaUrl,
                                                holidayMode:
                                                  selectedMandatoryWorkoutType.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedMandatoryWorkoutType.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedMandatoryWorkoutType;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                        }
                                      }
                                    }
                                  }

                                  if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                    for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: beforeOptionalWorkoutType,
                                        },
                                      });

                                      let randomOptionalBeforeWorkout;
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomOptionalBeforeWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedOptionalWorkoutType.name,
                                                type: selectedOptionalWorkoutType.type,
                                                generated:
                                                  selectedOptionalWorkoutType.generated,
                                                duration:
                                                  selectedOptionalWorkoutType.duration,
                                                relatedInjuries:
                                                  selectedOptionalWorkoutType.relatedInjuries,
                                                injuries:
                                                  selectedOptionalWorkoutType.injuries,
                                                mediaUrl:
                                                  selectedOptionalWorkoutType.mediaUrl,
                                                holidayMode:
                                                  selectedOptionalWorkoutType.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedOptionalWorkoutType.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedOptionalWorkoutType;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                        }
                                      }
                                    }
                                  }
                                  //TODO: add durationSeconds lateron
                                  const athleteWorkout =
                                    await this.prisma.workout.create(
                                      {
                                        data: {
                                          name: selectedWorkout.name,
                                          type: selectedWorkout.type,
                                          generated:
                                            selectedWorkout.generated,
                                          duration:
                                            selectedWorkout.duration,
                                          relatedInjuries:
                                            selectedWorkout.relatedInjuries,
                                          injuries:
                                            selectedWorkout.injuries,
                                          mediaUrl:
                                            selectedWorkout.mediaUrl,
                                          holidayMode:
                                            selectedWorkout.holidayMode,
                                          userClone: true,
                                          workoutSuperSetId:
                                            selectedWorkout.workoutSuperSetId,
                                        },
                                      },
                                    );

                                  await this.prisma.scheduleWorkout.create(
                                    {
                                      data: {
                                        userClone: true,
                                        planScheduleId:
                                          planSchedule.id,
                                        workoutId:
                                          athleteWorkout.id,
                                      },
                                    },
                                  );

                                  const { WorkoutParts } =
                                    selectedWorkout;
                                  for (const workoutPart of WorkoutParts) {
                                    const {
                                      comments,
                                      breaks,
                                      partExercises,
                                      generatedExercises
                                    } = workoutPart;
                                    const athleteWorkoutPart =
                                      await this.prisma.workoutParts.create(
                                        {
                                          data: {
                                            userClone: true,
                                            name: workoutPart.name,
                                            position:
                                              workoutPart.position,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                    //create comments
                                    if (comments.length > 0) {
                                      for (const comment of comments) {
                                        await this.prisma.comment.create(
                                          {
                                            data: {
                                              userClone: true,
                                              position:
                                                comment.position,
                                              comment:
                                                comment.comment,
                                              workoutPartsId:
                                                athleteWorkoutPart.id,
                                            },
                                          },
                                        );
                                      }
                                    }
                                    //create breaks
                                    if (breaks.length > 0) {
                                      for (const brk of breaks) {
                                        await this.prisma.break.create(
                                          {
                                            data: {
                                              userClone: true,
                                              position:
                                                brk.position,
                                              break: brk.break,
                                              workoutPartsId:
                                                athleteWorkoutPart.id,
                                            },
                                          },
                                        );
                                      }
                                    }

                                    if (partExercises && partExercises.length > 0) {
                                      for (const partExercise of partExercises) {

                                        await this.prisma.partExercises.create(
                                          {
                                            data: {
                                              userClone: true,
                                              benchmark:
                                                partExercise.benchmark,
                                              intensity:
                                                partExercise.intensity,
                                              position:
                                                partExercise.position,
                                              fieldOne:
                                                partExercise.fieldOne,
                                              fieldTwo:
                                                partExercise.fieldTwo,
                                              reps: partExercise.reps,
                                              sets: partExercise.sets,
                                              partId:
                                                athleteWorkoutPart.id,
                                              exerciseId:
                                                partExercise.exerciseId,
                                            },
                                          },
                                        );

                                      }
                                    }

                                    //extract generatedExercises and select an exercise to assign as partExercise
                                    if (generatedExercises && generatedExercises.length > 0) {
                                      for (const generatedExercise of generatedExercises) {

                                        const { muscleGroup, exerciseType } = generatedExercise

                                        const exercises = await this.prisma.exercise.findMany({
                                          where: {
                                            muscleGroup,
                                            exerciseType
                                          }
                                        });

                                        const randomExercise =
                                          exercises[
                                          Math.floor(
                                            Math.random() *
                                            exercises.length,
                                          )
                                          ];

                                        await this.prisma.partExercises.create(
                                          {
                                            data: {
                                              userClone: true,
                                              benchmark:
                                                generatedExercise.benchmark,
                                              intensity:
                                                generatedExercise.intensity,
                                              position:
                                                generatedExercise.position,
                                              fieldOne:
                                                generatedExercise.fieldOne,
                                              fieldTwo:
                                                generatedExercise.fieldTwo,
                                              reps: generatedExercise.reps,
                                              sets: generatedExercise.sets,
                                              partId:
                                                athleteWorkoutPart.id,
                                              exerciseId:
                                                randomExercise.id,
                                            },
                                          },
                                        );

                                      }
                                    }

                                  }

                                  if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                    for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: afterMandatoryWorkoutType,
                                        },
                                      });

                                      let randomMandatoryAfterWorkout;
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomMandatoryAfterWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedMandatoryAfterWorkout.name,
                                                type: selectedMandatoryAfterWorkout.type,
                                                generated:
                                                  selectedMandatoryAfterWorkout.generated,
                                                duration:
                                                  selectedMandatoryAfterWorkout.duration,
                                                relatedInjuries:
                                                  selectedMandatoryAfterWorkout.relatedInjuries,
                                                injuries:
                                                  selectedMandatoryAfterWorkout.injuries,
                                                mediaUrl:
                                                  selectedMandatoryAfterWorkout.mediaUrl,
                                                holidayMode:
                                                  selectedMandatoryAfterWorkout.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedMandatoryAfterWorkout.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedMandatoryAfterWorkout;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                        }
                                      }
                                    }
                                  }

                                  if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                    for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                      const workouts = await this.prisma.workout.findMany({
                                        where: {
                                          type: afterOptionalWorkoutType,
                                        },
                                      });

                                      let randomOptionalAfterWorkout;
                                      // Randomize and pick one workout
                                      if (workouts.length > 0) {
                                        randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                        const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                          {
                                            where: {
                                              id: randomOptionalAfterWorkout.id
                                            },
                                            include: {
                                              WorkoutParts: {
                                                include: {
                                                  comments: true,
                                                  breaks: true,
                                                  partExercises: {
                                                    include: {
                                                      exercise: true,
                                                    },
                                                  },
                                                  generatedExercises: true
                                                },
                                              },
                                            },
                                          },
                                        );
                                        //TODO: add durationSeconds lateron
                                        const athleteWorkout =
                                          await this.prisma.workout.create(
                                            {
                                              data: {
                                                name: selectedOptionAfterWorkout.name,
                                                type: selectedOptionAfterWorkout.type,
                                                generated:
                                                  selectedOptionAfterWorkout.generated,
                                                duration:
                                                  selectedOptionAfterWorkout.duration,
                                                relatedInjuries:
                                                  selectedOptionAfterWorkout.relatedInjuries,
                                                injuries:
                                                  selectedOptionAfterWorkout.injuries,
                                                mediaUrl:
                                                  selectedOptionAfterWorkout.mediaUrl,
                                                holidayMode:
                                                  selectedOptionAfterWorkout.holidayMode,
                                                userClone: true,
                                                workoutSuperSetId:
                                                  selectedOptionAfterWorkout.workoutSuperSetId,
                                              },
                                            },
                                          );

                                        await this.prisma.scheduleWorkout.create(
                                          {
                                            data: {
                                              userClone: true,
                                              planScheduleId:
                                                planSchedule.id,
                                              workoutId:
                                                athleteWorkout.id,
                                            },
                                          },
                                        );

                                        const { WorkoutParts } =
                                          selectedOptionAfterWorkout;
                                        for (const workoutPart of WorkoutParts) {
                                          const {
                                            comments,
                                            breaks,
                                            partExercises,
                                            generatedExercises
                                          } = workoutPart;
                                          const athleteWorkoutPart =
                                            await this.prisma.workoutParts.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  name: workoutPart.name,
                                                  position:
                                                    workoutPart.position,
                                                  workoutId:
                                                    athleteWorkout.id,
                                                },
                                              },
                                            );

                                          //create comments
                                          if (comments.length > 0) {
                                            for (const comment of comments) {
                                              await this.prisma.comment.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      comment.position,
                                                    comment:
                                                      comment.comment,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }
                                          //create breaks
                                          if (breaks.length > 0) {
                                            for (const brk of breaks) {
                                              await this.prisma.break.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    position:
                                                      brk.position,
                                                    break: brk.break,
                                                    workoutPartsId:
                                                      athleteWorkoutPart.id,
                                                  },
                                                },
                                              );
                                            }
                                          }

                                          if (partExercises && partExercises.length > 0) {
                                            for (const partExercise of partExercises) {

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      partExercise.benchmark,
                                                    intensity:
                                                      partExercise.intensity,
                                                    position:
                                                      partExercise.position,
                                                    fieldOne:
                                                      partExercise.fieldOne,
                                                    fieldTwo:
                                                      partExercise.fieldTwo,
                                                    reps: partExercise.reps,
                                                    sets: partExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      partExercise.exerciseId,
                                                  },
                                                },
                                              );

                                            }
                                          }

                                          //extract generatedExercises and select an exercise to assign as partExercise
                                          if (generatedExercises && generatedExercises.length > 0) {
                                            for (const generatedExercise of generatedExercises) {

                                              const { muscleGroup, exerciseType } = generatedExercise

                                              const exercises = await this.prisma.exercise.findMany({
                                                where: {
                                                  muscleGroup,
                                                  exerciseType
                                                }
                                              });

                                              const randomExercise =
                                                exercises[
                                                Math.floor(
                                                  Math.random() *
                                                  exercises.length,
                                                )
                                                ];

                                              await this.prisma.partExercises.create(
                                                {
                                                  data: {
                                                    userClone: true,
                                                    benchmark:
                                                      generatedExercise.benchmark,
                                                    intensity:
                                                      generatedExercise.intensity,
                                                    position:
                                                      generatedExercise.position,
                                                    fieldOne:
                                                      generatedExercise.fieldOne,
                                                    fieldTwo:
                                                      generatedExercise.fieldTwo,
                                                    reps: generatedExercise.reps,
                                                    sets: generatedExercise.sets,
                                                    partId:
                                                      athleteWorkoutPart.id,
                                                    exerciseId:
                                                      randomExercise.id,
                                                  },
                                                },
                                              );

                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }

                              }
                            }
                          }
                        } else if (
                          weekDaySetting.session === GYM_SESSION.Evening
                        ) {
                          const exist =
                            await this.prisma.planSchedule.findUnique({
                              where: {
                                week_day_gymSession_planId: {
                                  week: existingPlanSchedule.week + 1,
                                  planId: userPlan.planId,
                                  gymSession: GYM_SESSION.Evening,
                                  day: DAY.Tuesday,
                                },
                              },
                              include: {
                                scheduleWorkouts: {
                                  include: {
                                    workout: true,
                                  },
                                },
                              },
                            });

                          if (!exist) {
                            //check break rules
                            const breakRules =
                              await this.prisma.breakRules.findMany({
                                where: {
                                  planId: originalPlan.id,
                                  workoutType,
                                },
                              });

                            let twoDayBefore = true;
                            let oneHalfDayBefore = true;
                            let oneDayBefore = true;
                            let oneDayAfter = true;
                            let oneHalfDayAfter = true;
                            let twoDayAfter = true;

                            for (const breakRule of breakRules) {
                              if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayBefore
                              ) {
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorningWorkoutTypes: string[] = [];
                                const sunMorningWorkoutTypes: string[] = [];
                                const sunEveningWorkoutTypes: string[] = [];
                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunMorning) {
                                  for (const scheduleWorkout of sunMorning?.scheduleWorkouts) {
                                    sunMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monMorningWorkoutTypes.includes(type) ||
                                      sunMorningWorkoutTypes.includes(type) ||
                                      sunEveningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayBefore = true;
                                } else {
                                  twoDayBefore = false;
                                }

                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneHalfDayBefore
                              ) {
                                //Monday 1.5 ===> Sat Evening
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const sunEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Sunday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorningWorkoutTypes: string[] = [];
                                const sunEveningWorkoutTypes: string[] = [];

                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (sunEvening) {
                                  for (const scheduleWorkout of sunEvening?.scheduleWorkouts) {
                                    sunEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      monMorningWorkoutTypes.includes(type) ||
                                      sunEveningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayBefore = true;
                                  //means no break
                                } else {
                                  oneHalfDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.OneDayBefore
                              ) {
                                //Monday 1 ===> Sun Morning

                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const monMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Monday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const monMorningWorkoutTypes: string[] = [];

                                if (monMorning) {
                                  for (const scheduleWorkout of monMorning?.scheduleWorkouts) {
                                    monMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some((type) =>
                                    monMorningWorkoutTypes.includes(type),
                                  );

                                if (!isWorkoutTypeInSchedule) {
                                  oneDayBefore = true;
                                  //means no break
                                } else {
                                  oneDayBefore = false;
                                }
                              } else if (
                                breakRule.day === BREAK_RULE_DAYS.TwoDayAfter
                              ) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const wedMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Wednesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const wedMorningWorkoutTypes: string[] = [];
                                const tueEveningWorkoutTypes: string[] = [];
                                const tueMorningWorkoutTypes: string[] = [];
                                if (wedMorning) {
                                  for (const scheduleWorkout of wedMorning?.scheduleWorkouts) {
                                    wedMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }
                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      wedMorningWorkoutTypes.includes(type) ||
                                      tueEveningWorkoutTypes.includes(type) ||
                                      tueMorningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  twoDayAfter = true;
                                } else {
                                  twoDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneHalfDayAfter) {
                                //Monday 1.5 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;

                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueEvening =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Evening,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });

                                const tueEveningWorkoutTypes: string[] = [];
                                const tueMorningWorkoutTypes: string[] = [];
                                if (tueEvening) {
                                  for (const scheduleWorkout of tueEvening?.scheduleWorkouts) {
                                    tueEveningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }

                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      tueEveningWorkoutTypes.includes(type) ||
                                      tueMorningWorkoutTypes.includes(type),
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneHalfDayAfter = true;
                                } else {
                                  oneHalfDayAfter = false;
                                }

                              } else if (breakRule.day === BREAK_RULE_DAYS.OneDayAfter) {
                                //Monday 2 ===> Wed Morning
                                const selectedWorkoutTypes =
                                  breakRule.selectedWorkoutTypes;
                                const tueMorning =
                                  await this.prisma.planSchedule.findUnique({
                                    where: {
                                      week_day_gymSession_planId: {
                                        week: existingPlanSchedule.week + 1,
                                        planId: userPlan.planId,
                                        gymSession: GYM_SESSION.Morning,
                                        day: DAY.Tuesday,
                                      },
                                    },
                                    include: {
                                      scheduleWorkouts: {
                                        include: {
                                          workout: true,
                                        },
                                      },
                                    },
                                  });


                                const tueMorningWorkoutTypes: string[] = [];
                                if (tueMorning) {
                                  for (const scheduleWorkout of tueMorning?.scheduleWorkouts) {
                                    tueMorningWorkoutTypes.push(
                                      scheduleWorkout.workout.type,
                                    );
                                  }
                                }


                                // Check if any selected workout types are present in any of the sessions
                                const isWorkoutTypeInSchedule =
                                  selectedWorkoutTypes.some(
                                    (type) =>
                                      tueMorningWorkoutTypes.includes(type)
                                  );

                                //if not present, move ahead
                                if (!isWorkoutTypeInSchedule) {
                                  oneDayAfter = true;
                                } else {
                                  oneDayAfter = false;
                                }

                              }
                            }

                            if (twoDayBefore && oneHalfDayBefore && oneDayBefore && oneDayAfter && oneDayAfter && oneHalfDayAfter && twoDayAfter) {
                              //don't check low intensity workout rules in evenings

                              workoutOccurrence = workoutOccurrence + 1;
                              counter = counter + 1;
                              maxNonMissingCount = maxNonMissingCount + 1;

                              //check combination rules as well to see if anything comes before or after

                              const combinationsRules = await this.prisma.combinationRules.findUnique({
                                where: {
                                  planId: originalPlan.id,
                                },
                              })

                              const combinationRulesWorkoutTypes = await this.prisma.combinationRulesWorkoutTypes.findUnique({
                                where: {
                                  combinationRulesId_workoutType: {
                                    combinationRulesId: combinationsRules.id,
                                    workoutType: workoutType,
                                  }
                                },
                                include: {
                                  workoutTypesCombinations: {
                                    orderBy: {
                                      priority: 'asc'
                                    }
                                  }
                                }
                              })

                              const { workoutTypesCombinations } = combinationRulesWorkoutTypes;

                              let randomWorkoutType;
                              const workouts = await this.prisma.workout.findMany({
                                where: {
                                  type: workoutType,
                                  generated: true,
                                },
                              });

                              // Randomize and pick one workout
                              if (workouts.length > 0) {
                                randomWorkoutType = workouts[Math.floor(Math.random() * workouts.length)];

                                const selectedWorkout = await this.prisma.workout.findUnique(
                                  {
                                    where: {
                                      id: randomWorkoutType.id
                                    },
                                    include: {
                                      WorkoutParts: {
                                        include: {
                                          comments: true,
                                          breaks: true,
                                          partExercises: {
                                            include: {
                                              exercise: true,
                                            },
                                          },
                                          generatedExercises: true
                                        },
                                      },
                                    },
                                  },
                                );

                                const existingPlanSchedule =
                                  await this.prisma.planSchedule.findFirst(
                                    {
                                      where: {
                                        planId:
                                          userPlan.planId,
                                      },
                                      orderBy: {
                                        week: 'desc',
                                      },
                                    },
                                  );

                                let planSchedule;
                                if (existingPlanSchedule) {
                                  planSchedule =
                                    await this.prisma.planSchedule.create(
                                      {
                                        data: {
                                          week:
                                            existingPlanSchedule.week +
                                            1,
                                          userClone: true,
                                          planId:
                                            userPlan.planId,
                                          gymSession:
                                            GYM_SESSION.Evening,
                                          day: DAY.Monday,
                                        },
                                      },
                                    );
                                } else {
                                  planSchedule =
                                    await this.prisma.planSchedule.create(
                                      {
                                        data: {
                                          week: 1,
                                          userClone: true,
                                          planId:
                                            userPlan.planId,
                                          gymSession:
                                            GYM_SESSION.Evening,
                                          day: DAY.Monday,
                                        },
                                      },
                                    );
                                }

                                let beforeMandatoryWorkoutTypes;
                                let afterMandatoryWorkoutTypes;
                                let beforeOptionalWorkoutTypes;
                                let afterOptionalWorkoutTypes;
                                for (const workoutTypesCombination of workoutTypesCombinations) {
                                  if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                    beforeMandatoryWorkoutTypes.push(workoutTypesCombination);
                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.Before && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                    beforeOptionalWorkoutTypes.push(workoutTypesCombination);
                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Mandatory) {
                                    afterMandatoryWorkoutTypes.push(workoutTypesCombination);
                                  } else if (workoutTypesCombination.allocation === WORKOUT_COMBINATION_BEFORE_AFTER.After && workoutTypesCombination.status === WORKOUT_COMBINATION_STATUS.Optional) {
                                    afterOptionalWorkoutTypes.push(workoutTypesCombination);
                                  }
                                }

                                if (beforeMandatoryWorkoutTypes && beforeMandatoryWorkoutTypes.length > 0) {
                                  for (const beforeMandatoryWorkoutType of beforeMandatoryWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: beforeMandatoryWorkoutType,
                                      },
                                    });

                                    let randomMandatoryWorkout
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomMandatoryWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedMandatoryWorkoutType = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomMandatoryWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedMandatoryWorkoutType.name,
                                              type: selectedMandatoryWorkoutType.type,
                                              generated:
                                                selectedMandatoryWorkoutType.generated,
                                              duration:
                                                selectedMandatoryWorkoutType.duration,
                                              relatedInjuries:
                                                selectedMandatoryWorkoutType.relatedInjuries,
                                              injuries:
                                                selectedMandatoryWorkoutType.injuries,
                                              mediaUrl:
                                                selectedMandatoryWorkoutType.mediaUrl,
                                              holidayMode:
                                                selectedMandatoryWorkoutType.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedMandatoryWorkoutType.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedMandatoryWorkoutType;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }

                                      }
                                    }
                                  }
                                }

                                if (beforeOptionalWorkoutTypes && beforeOptionalWorkoutTypes.length > 0) {
                                  for (const beforeOptionalWorkoutType of beforeOptionalWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: beforeOptionalWorkoutType,
                                      },
                                    });

                                    let randomOptionalBeforeWorkout;
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomOptionalBeforeWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedOptionalWorkoutType = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomOptionalBeforeWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedOptionalWorkoutType.name,
                                              type: selectedOptionalWorkoutType.type,
                                              generated:
                                                selectedOptionalWorkoutType.generated,
                                              duration:
                                                selectedOptionalWorkoutType.duration,
                                              relatedInjuries:
                                                selectedOptionalWorkoutType.relatedInjuries,
                                              injuries:
                                                selectedOptionalWorkoutType.injuries,
                                              mediaUrl:
                                                selectedOptionalWorkoutType.mediaUrl,
                                              holidayMode:
                                                selectedOptionalWorkoutType.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedOptionalWorkoutType.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedOptionalWorkoutType;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }

                                      }
                                    }
                                  }
                                }
                                //TODO: add durationSeconds lateron
                                const athleteWorkout =
                                  await this.prisma.workout.create(
                                    {
                                      data: {
                                        name: selectedWorkout.name,
                                        type: selectedWorkout.type,
                                        generated:
                                          selectedWorkout.generated,
                                        duration:
                                          selectedWorkout.duration,
                                        relatedInjuries:
                                          selectedWorkout.relatedInjuries,
                                        injuries:
                                          selectedWorkout.injuries,
                                        mediaUrl:
                                          selectedWorkout.mediaUrl,
                                        holidayMode:
                                          selectedWorkout.holidayMode,
                                        userClone: true,
                                        workoutSuperSetId:
                                          selectedWorkout.workoutSuperSetId,
                                      },
                                    },
                                  );

                                await this.prisma.scheduleWorkout.create(
                                  {
                                    data: {
                                      userClone: true,
                                      planScheduleId:
                                        planSchedule.id,
                                      workoutId:
                                        athleteWorkout.id,
                                    },
                                  },
                                );

                                const { WorkoutParts } =
                                  selectedWorkout;
                                for (const workoutPart of WorkoutParts) {
                                  const {
                                    comments,
                                    breaks,
                                    partExercises,
                                    generatedExercises
                                  } = workoutPart;
                                  const athleteWorkoutPart =
                                    await this.prisma.workoutParts.create(
                                      {
                                        data: {
                                          userClone: true,
                                          name: workoutPart.name,
                                          position:
                                            workoutPart.position,
                                          workoutId:
                                            athleteWorkout.id,
                                        },
                                      },
                                    );

                                  //create comments
                                  if (comments.length > 0) {
                                    for (const comment of comments) {
                                      await this.prisma.comment.create(
                                        {
                                          data: {
                                            userClone: true,
                                            position:
                                              comment.position,
                                            comment:
                                              comment.comment,
                                            workoutPartsId:
                                              athleteWorkoutPart.id,
                                          },
                                        },
                                      );
                                    }
                                  }
                                  //create breaks
                                  if (breaks.length > 0) {
                                    for (const brk of breaks) {
                                      await this.prisma.break.create(
                                        {
                                          data: {
                                            userClone: true,
                                            position:
                                              brk.position,
                                            break: brk.break,
                                            workoutPartsId:
                                              athleteWorkoutPart.id,
                                          },
                                        },
                                      );
                                    }
                                  }

                                  if (partExercises && partExercises.length > 0) {
                                    for (const partExercise of partExercises) {

                                      await this.prisma.partExercises.create(
                                        {
                                          data: {
                                            userClone: true,
                                            benchmark:
                                              partExercise.benchmark,
                                            intensity:
                                              partExercise.intensity,
                                            position:
                                              partExercise.position,
                                            fieldOne:
                                              partExercise.fieldOne,
                                            fieldTwo:
                                              partExercise.fieldTwo,
                                            reps: partExercise.reps,
                                            sets: partExercise.sets,
                                            partId:
                                              athleteWorkoutPart.id,
                                            exerciseId:
                                              partExercise.exerciseId,
                                          },
                                        },
                                      );

                                    }
                                  }

                                  //extract generatedExercises and select an exercise to assign as partExercise
                                  if (generatedExercises && generatedExercises.length > 0) {
                                    for (const generatedExercise of generatedExercises) {

                                      const { muscleGroup, exerciseType } = generatedExercise

                                      const exercises = await this.prisma.exercise.findMany({
                                        where: {
                                          muscleGroup,
                                          exerciseType
                                        }
                                      });

                                      const randomExercise =
                                        exercises[
                                        Math.floor(
                                          Math.random() *
                                          exercises.length,
                                        )
                                        ];

                                      await this.prisma.partExercises.create(
                                        {
                                          data: {
                                            userClone: true,
                                            benchmark:
                                              generatedExercise.benchmark,
                                            intensity:
                                              generatedExercise.intensity,
                                            position:
                                              generatedExercise.position,
                                            fieldOne:
                                              generatedExercise.fieldOne,
                                            fieldTwo:
                                              generatedExercise.fieldTwo,
                                            reps: generatedExercise.reps,
                                            sets: generatedExercise.sets,
                                            partId:
                                              athleteWorkoutPart.id,
                                            exerciseId:
                                              randomExercise.id,
                                          },
                                        },
                                      );

                                    }
                                  }

                                }

                                if (afterMandatoryWorkoutTypes && afterMandatoryWorkoutTypes.length > 0) {
                                  for (const afterMandatoryWorkoutType of afterMandatoryWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: afterMandatoryWorkoutType,
                                      },
                                    });

                                    let randomMandatoryAfterWorkout;
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomMandatoryAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedMandatoryAfterWorkout = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomMandatoryAfterWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedMandatoryAfterWorkout.name,
                                              type: selectedMandatoryAfterWorkout.type,
                                              generated:
                                                selectedMandatoryAfterWorkout.generated,
                                              duration:
                                                selectedMandatoryAfterWorkout.duration,
                                              relatedInjuries:
                                                selectedMandatoryAfterWorkout.relatedInjuries,
                                              injuries:
                                                selectedMandatoryAfterWorkout.injuries,
                                              mediaUrl:
                                                selectedMandatoryAfterWorkout.mediaUrl,
                                              holidayMode:
                                                selectedMandatoryAfterWorkout.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedMandatoryAfterWorkout.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedMandatoryAfterWorkout;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }

                                      }
                                    }
                                  }
                                }

                                if (afterOptionalWorkoutTypes && afterOptionalWorkoutTypes.length > 0) {
                                  for (const afterOptionalWorkoutType of afterOptionalWorkoutTypes) {
                                    const workouts = await this.prisma.workout.findMany({
                                      where: {
                                        type: afterOptionalWorkoutType,
                                      },
                                    });

                                    let randomOptionalAfterWorkout;
                                    // Randomize and pick one workout
                                    if (workouts.length > 0) {
                                      randomOptionalAfterWorkout = workouts[Math.floor(Math.random() * workouts.length)];

                                      const selectedOptionAfterWorkout = await this.prisma.workout.findUnique(
                                        {
                                          where: {
                                            id: randomOptionalAfterWorkout.id
                                          },
                                          include: {
                                            WorkoutParts: {
                                              include: {
                                                comments: true,
                                                breaks: true,
                                                partExercises: {
                                                  include: {
                                                    exercise: true,
                                                  },
                                                },
                                                generatedExercises: true
                                              },
                                            },
                                          },
                                        },
                                      );
                                      //TODO: add durationSeconds lateron
                                      const athleteWorkout =
                                        await this.prisma.workout.create(
                                          {
                                            data: {
                                              name: selectedOptionAfterWorkout.name,
                                              type: selectedOptionAfterWorkout.type,
                                              generated:
                                                selectedOptionAfterWorkout.generated,
                                              duration:
                                                selectedOptionAfterWorkout.duration,
                                              relatedInjuries:
                                                selectedOptionAfterWorkout.relatedInjuries,
                                              injuries:
                                                selectedOptionAfterWorkout.injuries,
                                              mediaUrl:
                                                selectedOptionAfterWorkout.mediaUrl,
                                              holidayMode:
                                                selectedOptionAfterWorkout.holidayMode,
                                              userClone: true,
                                              workoutSuperSetId:
                                                selectedOptionAfterWorkout.workoutSuperSetId,
                                            },
                                          },
                                        );

                                      await this.prisma.scheduleWorkout.create(
                                        {
                                          data: {
                                            userClone: true,
                                            planScheduleId:
                                              planSchedule.id,
                                            workoutId:
                                              athleteWorkout.id,
                                          },
                                        },
                                      );

                                      const { WorkoutParts } =
                                        selectedOptionAfterWorkout;
                                      for (const workoutPart of WorkoutParts) {
                                        const {
                                          comments,
                                          breaks,
                                          partExercises,
                                          generatedExercises
                                        } = workoutPart;
                                        const athleteWorkoutPart =
                                          await this.prisma.workoutParts.create(
                                            {
                                              data: {
                                                userClone: true,
                                                name: workoutPart.name,
                                                position:
                                                  workoutPart.position,
                                                workoutId:
                                                  athleteWorkout.id,
                                              },
                                            },
                                          );

                                        //create comments
                                        if (comments.length > 0) {
                                          for (const comment of comments) {
                                            await this.prisma.comment.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    comment.position,
                                                  comment:
                                                    comment.comment,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }
                                        //create breaks
                                        if (breaks.length > 0) {
                                          for (const brk of breaks) {
                                            await this.prisma.break.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  position:
                                                    brk.position,
                                                  break: brk.break,
                                                  workoutPartsId:
                                                    athleteWorkoutPart.id,
                                                },
                                              },
                                            );
                                          }
                                        }

                                        if (partExercises && partExercises.length > 0) {
                                          for (const partExercise of partExercises) {

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    partExercise.benchmark,
                                                  intensity:
                                                    partExercise.intensity,
                                                  position:
                                                    partExercise.position,
                                                  fieldOne:
                                                    partExercise.fieldOne,
                                                  fieldTwo:
                                                    partExercise.fieldTwo,
                                                  reps: partExercise.reps,
                                                  sets: partExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    partExercise.exerciseId,
                                                },
                                              },
                                            );

                                          }
                                        }

                                        //extract generatedExercises and select an exercise to assign as partExercise
                                        if (generatedExercises && generatedExercises.length > 0) {
                                          for (const generatedExercise of generatedExercises) {

                                            const { muscleGroup, exerciseType } = generatedExercise

                                            const exercises = await this.prisma.exercise.findMany({
                                              where: {
                                                muscleGroup,
                                                exerciseType
                                              }
                                            });

                                            const randomExercise =
                                              exercises[
                                              Math.floor(
                                                Math.random() *
                                                exercises.length,
                                              )
                                              ];

                                            await this.prisma.partExercises.create(
                                              {
                                                data: {
                                                  userClone: true,
                                                  benchmark:
                                                    generatedExercise.benchmark,
                                                  intensity:
                                                    generatedExercise.intensity,
                                                  position:
                                                    generatedExercise.position,
                                                  fieldOne:
                                                    generatedExercise.fieldOne,
                                                  fieldTwo:
                                                    generatedExercise.fieldTwo,
                                                  reps: generatedExercise.reps,
                                                  sets: generatedExercise.sets,
                                                  partId:
                                                    athleteWorkoutPart.id,
                                                  exerciseId:
                                                    randomExercise.id,
                                                },
                                              },
                                            );

                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }


                            }
                          }
                        }
                      } else {
                        maxNonMissingCount = 0;
                      }
                    } else if (weekDaySetting.day === DAY.Wednesday) {
                      if (maxNonMissingCount !== restDays) {
                        maxNonMissingCount = maxNonMissingCount + 1;
                        if (weekDaySetting.session === GYM_SESSION.Morning) {
                        } else if (
                          weekDaySetting.session === GYM_SESSION.Evening
                        ) {
                        }
                      } else {
                        maxNonMissingCount = 0;
                      }
                    } else if (weekDaySetting.day === DAY.Thursday) {
                      if (maxNonMissingCount !== restDays) {
                        maxNonMissingCount = maxNonMissingCount + 1;
                        if (weekDaySetting.session === GYM_SESSION.Morning) {
                        } else if (
                          weekDaySetting.session === GYM_SESSION.Evening
                        ) {
                        }
                      } else {
                        maxNonMissingCount = 0;
                      }
                    } else if (weekDaySetting.day === DAY.Friday) {
                      if (maxNonMissingCount !== restDays) {
                        maxNonMissingCount = maxNonMissingCount + 1;
                        if (weekDaySetting.session === GYM_SESSION.Morning) {
                        } else if (
                          weekDaySetting.session === GYM_SESSION.Evening
                        ) {
                        }
                      } else {
                        maxNonMissingCount = 0;
                      }
                    } else if (weekDaySetting.day === DAY.Saturday) {
                      if (maxNonMissingCount !== restDays) {
                        maxNonMissingCount = maxNonMissingCount + 1;
                        if (weekDaySetting.session === GYM_SESSION.Morning) {
                        } else if (
                          weekDaySetting.session === GYM_SESSION.Evening
                        ) {
                        }
                      } else {
                        maxNonMissingCount = 0;
                      }
                    } else if (weekDaySetting.day === DAY.Sunday) {
                      if (maxNonMissingCount !== restDays) {
                        maxNonMissingCount = maxNonMissingCount + 1;
                        if (weekDaySetting.session === GYM_SESSION.Morning) {
                        } else if (
                          weekDaySetting.session === GYM_SESSION.Evening
                        ) {
                        }
                      } else {
                        maxNonMissingCount = 0;
                      }
                    }
                  }
                }
              } else if (uniqueDaysCount === 2) {
                workoutTypeRules = await this.prisma.workoutTypeRules.findFirst(
                  {
                    where: {
                      day: WORKOUT_TYPE_DAYS.TwoDay,
                      planId: originalPlan.id,
                    },
                    include: {
                      workoutPriorityOccurrence: {
                        orderBy: {
                          priority: 'asc',
                        },
                      },
                    },
                  },
                );
              } else if (uniqueDaysCount === 3) {
                workoutTypeRules = await this.prisma.workoutTypeRules.findFirst(
                  {
                    where: {
                      day: WORKOUT_TYPE_DAYS.ThreeDay,
                      planId: originalPlan.id,
                    },
                    include: {
                      workoutPriorityOccurrence: {
                        orderBy: {
                          priority: 'asc',
                        },
                      },
                    },
                  },
                );
              } else if (uniqueDaysCount === 4) {
                workoutTypeRules = await this.prisma.workoutTypeRules.findFirst(
                  {
                    where: {
                      day: WORKOUT_TYPE_DAYS.FourDay,
                      planId: originalPlan.id,
                    },
                    include: {
                      workoutPriorityOccurrence: {
                        orderBy: {
                          priority: 'asc',
                        },
                      },
                    },
                  },
                );
              } else if (uniqueDaysCount === 5) {
                workoutTypeRules = await this.prisma.workoutTypeRules.findFirst(
                  {
                    where: {
                      day: WORKOUT_TYPE_DAYS.FiveDay,
                      planId: originalPlan.id,
                    },
                    include: {
                      workoutPriorityOccurrence: {
                        orderBy: {
                          priority: 'asc',
                        },
                      },
                    },
                  },
                );
              } else if (uniqueDaysCount === 6) {
                workoutTypeRules = await this.prisma.workoutTypeRules.findFirst(
                  {
                    where: {
                      day: WORKOUT_TYPE_DAYS.SixDay,
                      planId: originalPlan.id,
                    },
                    include: {
                      workoutPriorityOccurrence: {
                        orderBy: {
                          priority: 'asc',
                        },
                      },
                    },
                  },
                );
              } else if (uniqueDaysCount === 7) {
                workoutTypeRules = await this.prisma.workoutTypeRules.findFirst(
                  {
                    where: {
                      day: WORKOUT_TYPE_DAYS.SevenDay,
                      planId: originalPlan.id,
                    },
                    include: {
                      workoutPriorityOccurrence: {
                        orderBy: {
                          priority: 'asc',
                        },
                      },
                    },
                  },
                );
              }
            } else {
              //handle for new plan
            }
          }
        }
      }
    }
  }
}
